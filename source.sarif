{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "addresses": [],
      "graphs": [],
      "invocations": [
        {
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": -1,
            "uri": "file:///Users/assafa/Documents/code/other-projects/terragoat"
          }
        },
        {
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": -1,
            "uri": "file:///Users/assafa/Documents/code/other-projects/terragoat/packages"
          }
        },
        {
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": -1,
            "uri": "file:///Users/assafa/Documents/code/other-projects/terragoat/packages/sub/.hidden"
          }
        },
        {
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": -1,
            "uri": "file:///Users/assafa/Documents/code/other-projects/terragoat/packages"
          }
        }
      ],
      "language": "en-US",
      "logicalLocations": [],
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "policies": [],
      "redactionTokens": [],
      "results": [
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2016-7401] django 1.2",
            "text": "[CVE-2016-7401] django 1.2"
          },
          "properties": {
            "applicability": "Missing Context",
            "fixedVersion": "[1.8.15], [1.9.10]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2016-7401_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-5144] django 1.2",
            "text": "[CVE-2015-5144] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.7.9], [1.8.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-5144_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4138] django 1.2",
            "text": "[CVE-2011-4138] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7], [1.3.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4138_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-2241] django 1.2",
            "text": "[CVE-2015-2241] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.7.6], [1.8b2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-2241_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2012-3444] django 1.2",
            "text": "[CVE-2012-3444] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.3.2], [1.4.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2012-3444_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4139] django 1.2",
            "text": "[CVE-2011-4139] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4139_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-36359] django 1.2",
            "text": "[CVE-2022-36359] django 1.2"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[3.2.15], [4.0.7]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-36359_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4137] django 1.2",
            "text": "[CVE-2011-4137] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7], [1.3.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4137_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-0698] django 1.2",
            "text": "[CVE-2011-0698] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.1.4], [1.2.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-0698_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2012-3442] django 1.2",
            "text": "[CVE-2012-3442] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.3.2], [1.4.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2012-3442_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-0697] django 1.2",
            "text": "[CVE-2011-0697] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.1.4], [1.2.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-0697_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2016-6186] django 1.2",
            "text": "[CVE-2016-6186] django 1.2"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.10rc1], [1.8.14], [1.9.8]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2016-6186_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-48432] django 1.2",
            "text": "[CVE-2025-48432] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[4.2.22], [5.1.10], [5.2.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-48432_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-0696] django 1.2",
            "text": "[CVE-2011-0696] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.1.4], [1.2.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-0696_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4136] django 1.2",
            "text": "[CVE-2011-4136] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7], [1.3.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4136_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2010-3082] django 1.2",
            "text": "[CVE-2010-3082] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2010-3082_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-0221] django 1.2",
            "text": "[CVE-2015-0221] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.18]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-0221_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4140] django 1.2",
            "text": "[CVE-2011-4140] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "No fix available"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4140_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-45231] django 1.2",
            "text": "[CVE-2024-45231] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[4.2.16], [5.0.9], [5.1.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-45231_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-2317] django 1.2",
            "text": "[CVE-2015-2317] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.20], [1.6.11], [1.7.7], [1.8c1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-2317_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2014-0482] django 1.2",
            "text": "[CVE-2014-0482] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.5.9], [1.6.6], [1.7c3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2014-0482_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2010-4534] django 1.2",
            "text": "[CVE-2010-4534] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2010-4534_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2014-0472] django 1.2",
            "text": "[CVE-2014-0472] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.11], [1.5.6], [1.6.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2014-0472_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2016-2513] django 1.2",
            "text": "[CVE-2016-2513] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.8.10], [1.9.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2016-2513_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2019-19844] django 1.2",
            "text": "[CVE-2019-19844] django 1.2"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.11.27]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2019-19844_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2014-0483] django 1.2",
            "text": "[CVE-2014-0483] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.14], [1.5.9], [1.6.6], [1.7c3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2014-0483_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-5143] django 1.2",
            "text": "[CVE-2015-5143] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.21]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-5143_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2018-20225] pip 25.2",
            "text": "[CVE-2018-20225] pip 25.2"
          },
          "properties": {
            "applicability": "Undetermined",
            "fixedVersion": "No fix available"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2018-20225_pip_25.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2016-7401] django 1.2",
            "text": "[CVE-2016-7401] django 1.2"
          },
          "properties": {
            "applicability": "Missing Context",
            "fixedVersion": "[1.8.15], [1.9.10]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2016-7401_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-5144] django 1.2",
            "text": "[CVE-2015-5144] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.7.9], [1.8.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-5144_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4138] django 1.2",
            "text": "[CVE-2011-4138] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7], [1.3.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4138_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-2241] django 1.2",
            "text": "[CVE-2015-2241] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.7.6], [1.8b2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-2241_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2012-3444] django 1.2",
            "text": "[CVE-2012-3444] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.3.2], [1.4.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2012-3444_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4139] django 1.2",
            "text": "[CVE-2011-4139] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4139_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2022-36359] django 1.2",
            "text": "[CVE-2022-36359] django 1.2"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[3.2.15], [4.0.7]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2022-36359_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4137] django 1.2",
            "text": "[CVE-2011-4137] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7], [1.3.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4137_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-0698] django 1.2",
            "text": "[CVE-2011-0698] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.1.4], [1.2.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-0698_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2012-3442] django 1.2",
            "text": "[CVE-2012-3442] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.3.2], [1.4.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2012-3442_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-0697] django 1.2",
            "text": "[CVE-2011-0697] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.1.4], [1.2.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-0697_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2016-6186] django 1.2",
            "text": "[CVE-2016-6186] django 1.2"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.10rc1], [1.8.14], [1.9.8]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2016-6186_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2025-48432] django 1.2",
            "text": "[CVE-2025-48432] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[4.2.22], [5.1.10], [5.2.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2025-48432_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-0696] django 1.2",
            "text": "[CVE-2011-0696] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.1.4], [1.2.5]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-0696_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4136] django 1.2",
            "text": "[CVE-2011-4136] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.7], [1.3.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4136_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2010-3082] django 1.2",
            "text": "[CVE-2010-3082] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.2]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2010-3082_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-0221] django 1.2",
            "text": "[CVE-2015-0221] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.18]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-0221_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2011-4140] django 1.2",
            "text": "[CVE-2011-4140] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "No fix available"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2011-4140_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-45231] django 1.2",
            "text": "[CVE-2024-45231] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[4.2.16], [5.0.9], [5.1.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-45231_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-2317] django 1.2",
            "text": "[CVE-2015-2317] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.20], [1.6.11], [1.7.7], [1.8c1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-2317_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2014-0482] django 1.2",
            "text": "[CVE-2014-0482] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.5.9], [1.6.6], [1.7c3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2014-0482_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2010-4534] django 1.2",
            "text": "[CVE-2010-4534] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.2.4]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2010-4534_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2014-0472] django 1.2",
            "text": "[CVE-2014-0472] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.11], [1.5.6], [1.6.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2014-0472_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2016-2513] django 1.2",
            "text": "[CVE-2016-2513] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.8.10], [1.9.3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2016-2513_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2019-19844] django 1.2",
            "text": "[CVE-2019-19844] django 1.2"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.11.27]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2019-19844_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "note",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2014-0483] django 1.2",
            "text": "[CVE-2014-0483] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.14], [1.5.9], [1.6.6], [1.7c3]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2014-0483_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2015-5143] django 1.2",
            "text": "[CVE-2015-5143] django 1.2"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.4.21]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2015-5143_django_1.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "requirements.txt"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2018-20225] pip 25.2",
            "text": "[CVE-2018-20225] pip 25.2"
          },
          "properties": {
            "applicability": "Undetermined",
            "fixedVersion": "No fix available"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2018-20225_pip_25.2",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2024-25710] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2024-25710] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.26.0]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2024-25710_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2019-12402] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2019-12402] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.19]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2019-12402_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2021-35517] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2021-35517] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.21]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2021-35517_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2021-35515] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2021-35515] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.21]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2021-35515_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2021-35516] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2021-35516] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.21]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2021-35516_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2018-1324] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2018-1324] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.16]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2018-1324_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2021-36090] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2021-36090] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Applicable",
            "fixedVersion": "[1.21]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2021-36090_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2018-11771] org.apache.commons:commons-compress 1.15",
            "text": "[CVE-2018-11771] org.apache.commons:commons-compress 1.15"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[1.18]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2018-11771_org.apache.commons:commons-compress_1.15",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        },
        {
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "kind": "fail",
          "level": "warning",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "pom.xml"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "[CVE-2020-15250] junit:junit 4.12",
            "text": "[CVE-2020-15250] junit:junit 4.12"
          },
          "properties": {
            "applicability": "Not Covered",
            "fixedVersion": "[4.13.1]"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "CVE-2020-15250_junit:junit_4.12",
          "ruleIndex": -1,
          "stacks": [],
          "taxa": []
        }
      ],
      "runAggregates": [],
      "taxonomies": [],
      "threadFlowLocations": [],
      "tool": {
        "driver": {
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "isComprehensive": false,
          "language": "en-US",
          "locations": [],
          "name": "JFrog Xray Scanner",
          "notifications": [],
          "rules": [
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.4.18]   |",
                "text": "The django.views.static.serve view in Django before 1.4.18, 1.6.x before 1.6.10, and 1.7.x before 1.7.3 reads files an entire line at a time, which allows remote attackers to cause a denial of service (memory consumption) via a long line in a file."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.4.18]   |",
                "text": "The django.views.static.serve view in Django before 1.4.18, 1.6.x before 1.6.10, and 1.7.x before 1.7.3 reads files an entire line at a time, which allows remote attackers to cause a denial of service (memory consumption) via a long line in a file."
              },
              "id": "CVE-2015-0221_django_1.2",
              "name": "CVE-2015-0221-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2015-0221] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | No fix available   |",
                "text": "The CSRF protection mechanism in Django through 1.2.7 and 1.3.x through 1.3.1 does not properly handle web-server configurations supporting arbitrary HTTP Host headers, which allows remote attackers to trigger unauthenticated forged requests via vectors involving a DNS CNAME record and a web page containing JavaScript code."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | No fix available   |",
                "text": "The CSRF protection mechanism in Django through 1.2.7 and 1.3.x through 1.3.1 does not properly handle web-server configurations supporting arbitrary HTTP Host headers, which allows remote attackers to trigger unauthenticated forged requests via vectors involving a DNS CNAME record and a web page containing JavaScript code."
              },
              "id": "CVE-2011-4140_django_1.2",
              "name": "CVE-2011-4140-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-4140] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Undetermined       | `pip 25.2`       | No fix available   |",
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely"
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Undetermined       | `pip 25.2`       | No fix available   |",
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely"
              },
              "id": "CVE-2018-20225_pip_25.2",
              "name": "CVE-2018-20225-pip-25.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "pip",
                      "version": "25.2"
                    }
                  ]
                ],
                "security-severity": "7.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 25.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.0      | Not Covered       | `django 1.2`       | [4.2.22], [5.1.10], [5.2.2]   |",
                "text": "An issue was discovered in Django 5.2 before 5.2.3, 5.1 before 5.1.11, and 4.2 before 4.2.23. Internal HTTP response logging does not escape request.path, which allows remote attackers to potentially manipulate log output via crafted URLs. This may lead to log injection or forgery when logs are viewed in terminals or processed by external systems."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.0      | Not Covered       | `django 1.2`       | [4.2.22], [5.1.10], [5.2.2]   |",
                "text": "An issue was discovered in Django 5.2 before 5.2.3, 5.1 before 5.1.11, and 4.2 before 4.2.23. Internal HTTP response logging does not escape request.path, which allows remote attackers to potentially manipulate log output via crafted URLs. This may lead to log injection or forgery when logs are viewed in terminals or processed by external systems."
              },
              "id": "CVE-2025-48432_django_1.2",
              "name": "CVE-2025-48432-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "4.0"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2025-48432] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.7.9], [1.8.3]   |",
                "text": "Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 uses an incorrect regular expression, which allows remote attackers to inject arbitrary headers and conduct HTTP response splitting attacks via a newline character in an (1) email message to the EmailValidator, a (2) URL to the URLValidator, or unspecified vectors to the (3) validate_ipv4_address or (4) validate_slug validator."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.7.9], [1.8.3]   |",
                "text": "Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 uses an incorrect regular expression, which allows remote attackers to inject arbitrary headers and conduct HTTP response splitting attacks via a newline character in an (1) email message to the EmailValidator, a (2) URL to the URLValidator, or unspecified vectors to the (3) validate_ipv4_address or (4) validate_slug validator."
              },
              "id": "CVE-2015-5144_django_1.2",
              "name": "CVE-2015-5144-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2015-5144] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.2.7], [1.3.1]   |",
                "text": "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 originally tests a URL's validity through a HEAD request, but then uses a GET request for the new target URL in the case of a redirect, which might allow remote attackers to trigger arbitrary GET requests with an unintended source IP address via a crafted Location header."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.2.7], [1.3.1]   |",
                "text": "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 originally tests a URL's validity through a HEAD request, but then uses a GET request for the new target URL in the case of a redirect, which might allow remote attackers to trigger arbitrary GET requests with an unintended source IP address via a crafted Location header."
              },
              "id": "CVE-2011-4138_django_1.2",
              "name": "CVE-2011-4138-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-4138] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.7.6], [1.8b2]   |",
                "text": "Cross-site scripting (XSS) vulnerability in the contents function in admin/helpers.py in Django before 1.7.6 and 1.8 before 1.8b2 allows remote attackers to inject arbitrary web script or HTML via a model attribute in ModelAdmin.readonly_fields, as demonstrated by a @property."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.7.6], [1.8b2]   |",
                "text": "Cross-site scripting (XSS) vulnerability in the contents function in admin/helpers.py in Django before 1.7.6 and 1.8 before 1.8b2 allows remote attackers to inject arbitrary web script or HTML via a model attribute in ModelAdmin.readonly_fields, as demonstrated by a @property."
              },
              "id": "CVE-2015-2241_django_1.2",
              "name": "CVE-2015-2241-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2015-2241] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.2.7], [1.3.1]   |",
                "text": "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 relies on Python libraries that attempt access to an arbitrary URL with no timeout, which allows remote attackers to cause a denial of service (resource consumption) via a URL associated with (1) a slow response, (2) a completed TCP connection with no application data sent, or (3) a large amount of application data, a related issue to CVE-2011-1521."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.2.7], [1.3.1]   |",
                "text": "The verify_exists functionality in the URLField implementation in Django before 1.2.7 and 1.3.x before 1.3.1 relies on Python libraries that attempt access to an arbitrary URL with no timeout, which allows remote attackers to cause a denial of service (resource consumption) via a URL associated with (1) a slow response, (2) a completed TCP connection with no application data sent, or (3) a large amount of application data, a related issue to CVE-2011-1521."
              },
              "id": "CVE-2011-4137_django_1.2",
              "name": "CVE-2011-4137-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-4137] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.3.2], [1.4.1]   |",
                "text": "The (1) django.http.HttpResponseRedirect and (2) django.http.HttpResponsePermanentRedirect classes in Django before 1.3.2 and 1.4.x before 1.4.1 do not validate the scheme of a redirect target, which might allow remote attackers to conduct cross-site scripting (XSS) attacks via a data: URL."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.3.2], [1.4.1]   |",
                "text": "The (1) django.http.HttpResponseRedirect and (2) django.http.HttpResponsePermanentRedirect classes in Django before 1.3.2 and 1.4.x before 1.4.1 do not validate the scheme of a redirect target, which might allow remote attackers to conduct cross-site scripting (XSS) attacks via a data: URL."
              },
              "id": "CVE-2012-3442_django_1.2",
              "name": "CVE-2012-3442-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2012-3442] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `django 1.2`       | [1.5.9], [1.6.6], [1.7c3]   |",
                "text": "The contrib.auth.middleware.RemoteUserMiddleware middleware in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3, when using the contrib.auth.backends.RemoteUserBackend backend, allows remote authenticated users to hijack web sessions via vectors related to the REMOTE_USER header."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `django 1.2`       | [1.5.9], [1.6.6], [1.7c3]   |",
                "text": "The contrib.auth.middleware.RemoteUserMiddleware middleware in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3, when using the contrib.auth.backends.RemoteUserBackend backend, allows remote authenticated users to hijack web sessions via vectors related to the REMOTE_USER header."
              },
              "id": "CVE-2014-0482_django_1.2",
              "name": "CVE-2014-0482-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2014-0482] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `django 1.2`       | [1.2.4]   |",
                "text": "The administrative interface in django.contrib.admin in Django before 1.1.3, 1.2.x before 1.2.4, and 1.3.x before 1.3 beta 1 does not properly restrict use of the query string to perform certain object filtering, which allows remote authenticated users to obtain sensitive information via a series of requests containing regular expressions, as demonstrated by a created_by__password__regex parameter."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `django 1.2`       | [1.2.4]   |",
                "text": "The administrative interface in django.contrib.admin in Django before 1.1.3, 1.2.x before 1.2.4, and 1.3.x before 1.3 beta 1 does not properly restrict use of the query string to perform certain object filtering, which allows remote authenticated users to obtain sensitive information via a series of requests containing regular expressions, as demonstrated by a created_by__password__regex parameter."
              },
              "id": "CVE-2010-4534_django_1.2",
              "name": "CVE-2010-4534-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2010-4534] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.2.7]   |",
                "text": "Django before 1.2.7 and 1.3.x before 1.3.1 uses a request's HTTP Host header to construct a full URL in certain circumstances, which allows remote attackers to conduct cache poisoning attacks via a crafted request."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.2.7]   |",
                "text": "Django before 1.2.7 and 1.3.x before 1.3.1 uses a request's HTTP Host header to construct a full URL in certain circumstances, which allows remote attackers to conduct cache poisoning attacks via a crafted request."
              },
              "id": "CVE-2011-4139_django_1.2",
              "name": "CVE-2011-4139-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-4139] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `django 1.2`       | [3.2.15], [4.0.7]   |",
                "text": "An issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `django 1.2`       | [3.2.15], [4.0.7]   |",
                "text": "An issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input."
              },
              "id": "CVE-2022-36359_django_1.2",
              "name": "CVE-2022-36359-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "8.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2022-36359] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `django 1.2`       | [1.1.4], [1.2.5]   |",
                "text": "Directory traversal vulnerability in Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 on Windows might allow remote attackers to read or execute files via a / (slash) character in a key in a session cookie, related to session replays."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `django 1.2`       | [1.1.4], [1.2.5]   |",
                "text": "Directory traversal vulnerability in Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 on Windows might allow remote attackers to read or execute files via a / (slash) character in a key in a session cookie, related to session replays."
              },
              "id": "CVE-2011-0698_django_1.2",
              "name": "CVE-2011-0698-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "9.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-0698] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.2.2]   |",
                "text": "Cross-site scripting (XSS) vulnerability in Django 1.2.x before 1.2.2 allows remote attackers to inject arbitrary web script or HTML via a csrfmiddlewaretoken (aka csrf_token) cookie."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.2.2]   |",
                "text": "Cross-site scripting (XSS) vulnerability in Django 1.2.x before 1.2.2 allows remote attackers to inject arbitrary web script or HTML via a csrfmiddlewaretoken (aka csrf_token) cookie."
              },
              "id": "CVE-2010-3082_django_1.2",
              "name": "CVE-2010-3082-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2010-3082] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `django 1.2`       | [4.2.16], [5.0.9], [5.1.1]   |",
                "text": "An issue was discovered in Django v5.1.1, v5.0.9, and v4.2.16. The django.contrib.auth.forms.PasswordResetForm class, when used in a view implementing password reset flows, allows remote attackers to enumerate user e-mail addresses by sending password reset requests and observing the outcome (only when e-mail sending is consistently failing)."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `django 1.2`       | [4.2.16], [5.0.9], [5.1.1]   |",
                "text": "An issue was discovered in Django v5.1.1, v5.0.9, and v4.2.16. The django.contrib.auth.forms.PasswordResetForm class, when used in a view implementing password reset flows, allows remote attackers to enumerate user e-mail addresses by sending password reset requests and observing the outcome (only when e-mail sending is consistently failing)."
              },
              "id": "CVE-2024-45231_django_1.2",
              "name": "CVE-2024-45231-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-45231] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `django 1.2`       | [1.8.10], [1.9.3]   |",
                "text": "The password hasher in contrib/auth/hashers.py in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to enumerate users via a timing attack involving login requests."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `django 1.2`       | [1.8.10], [1.9.3]   |",
                "text": "The password hasher in contrib/auth/hashers.py in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to enumerate users via a timing attack involving login requests."
              },
              "id": "CVE-2016-2513_django_1.2",
              "name": "CVE-2016-2513-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "3.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2016-2513] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `django 1.2`       | [1.11.27]   |",
                "text": "Django before 1.11.27, 2.x before 2.2.9, and 3.x before 3.0.1 allows account takeover. A suitably crafted email address (that is equal to an existing user's email address after case transformation of Unicode characters) would allow an attacker to be sent a password reset token for the matched user account. (One mitigation in the new releases is to send password reset tokens only to the registered user email address.)"
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `django 1.2`       | [1.11.27]   |",
                "text": "Django before 1.11.27, 2.x before 2.2.9, and 3.x before 3.0.1 allows account takeover. A suitably crafted email address (that is equal to an existing user's email address after case transformation of Unicode characters) would allow an attacker to be sent a password reset token for the matched user account. (One mitigation in the new releases is to send password reset tokens only to the registered user email address.)"
              },
              "id": "CVE-2019-19844_django_1.2",
              "name": "CVE-2019-19844-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2019-19844] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `django 1.2`       | [1.4.14], [1.5.9], [1.6.6], [1.7c3]   |",
                "text": "The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `django 1.2`       | [1.4.14], [1.5.9], [1.6.6], [1.7c3]   |",
                "text": "The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI."
              },
              "id": "CVE-2014-0483_django_1.2",
              "name": "CVE-2014-0483-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "5.3"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2014-0483] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.1.4], [1.2.5]   |",
                "text": "Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 does not properly validate HTTP requests that contain an X-Requested-With header, which makes it easier for remote attackers to conduct cross-site request forgery (CSRF) attacks via forged AJAX requests that leverage a \"combination of browser plugins and redirects,\" a related issue to CVE-2011-0447."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.1.4], [1.2.5]   |",
                "text": "Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 does not properly validate HTTP requests that contain an X-Requested-With header, which makes it easier for remote attackers to conduct cross-site request forgery (CSRF) attacks via forged AJAX requests that leverage a \"combination of browser plugins and redirects,\" a related issue to CVE-2011-0447."
              },
              "id": "CVE-2011-0696_django_1.2",
              "name": "CVE-2011-0696-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-0696] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.3.2], [1.4.1]   |",
                "text": "The get_image_dimensions function in the image-handling functionality in Django before 1.3.2 and 1.4.x before 1.4.1 uses a constant chunk size in all attempts to determine dimensions, which allows remote attackers to cause a denial of service (process or thread consumption) via a large TIFF image."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.3.2], [1.4.1]   |",
                "text": "The get_image_dimensions function in the image-handling functionality in Django before 1.3.2 and 1.4.x before 1.4.1 uses a constant chunk size in all attempts to determine dimensions, which allows remote attackers to cause a denial of service (process or thread consumption) via a large TIFF image."
              },
              "id": "CVE-2012-3444_django_1.2",
              "name": "CVE-2012-3444-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2012-3444] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.1.4], [1.2.5]   |",
                "text": "Cross-site scripting (XSS) vulnerability in Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 might allow remote attackers to inject arbitrary web script or HTML via a filename associated with a file upload."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.1.4], [1.2.5]   |",
                "text": "Cross-site scripting (XSS) vulnerability in Django 1.1.x before 1.1.4 and 1.2.x before 1.2.5 might allow remote attackers to inject arbitrary web script or HTML via a filename associated with a file upload."
              },
              "id": "CVE-2011-0697_django_1.2",
              "name": "CVE-2011-0697-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-0697] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `django 1.2`       | [1.10rc1], [1.8.14], [1.9.8]   |",
                "text": "Cross-site scripting (XSS) vulnerability in the dismissChangeRelatedObjectPopup function in contrib/admin/static/admin/js/admin/RelatedObjectLookups.js in Django before 1.8.14, 1.9.x before 1.9.8, and 1.10.x before 1.10rc1 allows remote attackers to inject arbitrary web script or HTML via vectors involving unsafe usage of Element.innerHTML."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `django 1.2`       | [1.10rc1], [1.8.14], [1.9.8]   |",
                "text": "Cross-site scripting (XSS) vulnerability in the dismissChangeRelatedObjectPopup function in contrib/admin/static/admin/js/admin/RelatedObjectLookups.js in Django before 1.8.14, 1.9.x before 1.9.8, and 1.10.x before 1.10rc1 allows remote attackers to inject arbitrary web script or HTML via vectors involving unsafe usage of Element.innerHTML."
              },
              "id": "CVE-2016-6186_django_1.2",
              "name": "CVE-2016-6186-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2016-6186] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.0      | Not Covered       | `django 1.2`       | [1.2.7], [1.3.1]   |",
                "text": "django.contrib.sessions in Django before 1.2.7 and 1.3.x before 1.3.1, when session data is stored in the cache, uses the root namespace for both session identifiers and application-data keys, which allows remote attackers to modify a session by triggering use of a key that is equal to that session's identifier."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.0      | Not Covered       | `django 1.2`       | [1.2.7], [1.3.1]   |",
                "text": "django.contrib.sessions in Django before 1.2.7 and 1.3.x before 1.3.1, when session data is stored in the cache, uses the root namespace for both session identifiers and application-data keys, which allows remote attackers to modify a session by triggering use of a key that is equal to that session's identifier."
              },
              "id": "CVE-2011-4136_django_1.2",
              "name": "CVE-2011-4136-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "4.0"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2011-4136] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.4.20], [1.6.11], [1.7.7], [1.8c1]   |",
                "text": "The utils.http.is_safe_url function in Django before 1.4.20, 1.5.x, 1.6.x before 1.6.11, 1.7.x before 1.7.7, and 1.8.x before 1.8c1 does not properly validate URLs, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a control character in a URL, as demonstrated by a \\x08javascript: URL."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `django 1.2`       | [1.4.20], [1.6.11], [1.7.7], [1.8c1]   |",
                "text": "The utils.http.is_safe_url function in Django before 1.4.20, 1.5.x, 1.6.x before 1.6.11, 1.7.x before 1.7.7, and 1.8.x before 1.8c1 does not properly validate URLs, which allows remote attackers to conduct cross-site scripting (XSS) attacks via a control character in a URL, as demonstrated by a \\x08javascript: URL."
              },
              "id": "CVE-2015-2317_django_1.2",
              "name": "CVE-2015-2317-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "6.1"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2015-2317] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `django 1.2`       | [1.4.11], [1.5.6], [1.6.3]   |",
                "text": "The django.core.urlresolvers.reverse function in Django before 1.4.11, 1.5.x before 1.5.6, 1.6.x before 1.6.3, and 1.7.x before 1.7 beta 2 allows remote attackers to import and execute arbitrary Python modules by leveraging a view that constructs URLs using user input and a \"dotted Python path.\""
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `django 1.2`       | [1.4.11], [1.5.6], [1.6.3]   |",
                "text": "The django.core.urlresolvers.reverse function in Django before 1.4.11, 1.5.x before 1.5.6, 1.6.x before 1.6.3, and 1.7.x before 1.7 beta 2 allows remote attackers to import and execute arbitrary Python modules by leveraging a view that constructs URLs using user input and a \"dotted Python path.\""
              },
              "id": "CVE-2014-0472_django_1.2",
              "name": "CVE-2014-0472-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "9.8"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2014-0472] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.4.21]   |",
                "text": "The session backends in Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 allows remote attackers to cause a denial of service (session store consumption) via multiple requests with unique session keys."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `django 1.2`       | [1.4.21]   |",
                "text": "The session backends in Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 allows remote attackers to cause a denial of service (session store consumption) via multiple requests with unique session keys."
              },
              "id": "CVE-2015-5143_django_1.2",
              "name": "CVE-2015-5143-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2015-5143] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Missing Context       | `django 1.2`       | [1.8.15], [1.9.10]   |",
                "text": "The cookie parsing code in Django before 1.8.15 and 1.9.x before 1.9.10, when used on a site with Google Analytics, allows remote attackers to bypass an intended CSRF protection mechanism by setting arbitrary cookies."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Missing Context       | `django 1.2`       | [1.8.15], [1.9.10]   |",
                "text": "The cookie parsing code in Django before 1.8.15 and 1.9.x before 1.9.10, when used on a site with Google Analytics, allows remote attackers to bypass an intended CSRF protection mechanism by setting arbitrary cookies."
              },
              "id": "CVE-2016-7401_django_1.2",
              "name": "CVE-2016-7401-django-1.2",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "root",
                      "version": ""
                    },
                    {
                      "name": "django",
                      "version": "1.2"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2016-7401] django 1.2"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.18]   |",
                "text": "When reading a specially crafted ZIP archive, the read method of Apache Commons Compress 1.7 to 1.17's ZipArchiveInputStream can fail to return the correct EOF indication after the end of the stream has been reached. When combined with a java.io.InputStreamReader this can lead to an infinite stream, which can be used to mount a denial of service attack against services that use Compress' zip package."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.18]   |",
                "text": "When reading a specially crafted ZIP archive, the read method of Apache Commons Compress 1.7 to 1.17's ZipArchiveInputStream can fail to return the correct EOF indication after the end of the stream has been reached. When combined with a java.io.InputStreamReader this can lead to an infinite stream, which can be used to mount a denial of service attack against services that use Compress' zip package."
              },
              "id": "CVE-2018-11771_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2018-11771-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2018-11771] org.apache.commons:commons-compress 1.15"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `junit:junit 4.12`       | [4.13.1]   |",
                "text": "In JUnit4 from version 4.7 and before 4.13.1, the test rule TemporaryFolder contains a local information disclosure vulnerability. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. This vulnerability impacts you if the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder, and the JUnit tests execute in an environment where the OS has other untrusted users. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. For Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. For Java 1.6 and lower users: no patch is available, you must use the workaround below. If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. For more information, including an example of vulnerable code, see the referenced GitHub Security Advisory."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `junit:junit 4.12`       | [4.13.1]   |",
                "text": "In JUnit4 from version 4.7 and before 4.13.1, the test rule TemporaryFolder contains a local information disclosure vulnerability. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. This vulnerability impacts you if the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder, and the JUnit tests execute in an environment where the OS has other untrusted users. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. For Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. For Java 1.6 and lower users: no patch is available, you must use the workaround below. If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. For more information, including an example of vulnerable code, see the referenced GitHub Security Advisory."
              },
              "id": "CVE-2020-15250_junit:junit_4.12",
              "name": "CVE-2020-15250-junit:junit-4.12",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "junit:junit",
                      "version": "4.12"
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2020-15250] junit:junit 4.12"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted 7Z archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' sevenz package."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted 7Z archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' sevenz package."
              },
              "id": "CVE-2021-35516_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2021-35516-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2021-35516] org.apache.commons:commons-compress 1.15"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.16]   |",
                "text": "A specially crafted ZIP archive can be used to cause an infinite loop inside of Apache Commons Compress' extra field parser used by the ZipFile and ZipArchiveInputStream classes in versions 1.11 to 1.15. This can be used to mount a denial of service attack against services that use Compress' zip package."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.16]   |",
                "text": "A specially crafted ZIP archive can be used to cause an infinite loop inside of Apache Commons Compress' extra field parser used by the ZipFile and ZipArchiveInputStream classes in versions 1.11 to 1.15. This can be used to mount a denial of service attack against services that use Compress' zip package."
              },
              "id": "CVE-2018-1324_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2018-1324-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2018-1324] org.apache.commons:commons-compress 1.15"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.26.0]   |",
                "text": "Loop with Unreachable Exit Condition ('Infinite Loop') vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.3 through 1.25.0.\n\nUsers are recommended to upgrade to version 1.26.0 which fixes the issue."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.26.0]   |",
                "text": "Loop with Unreachable Exit Condition ('Infinite Loop') vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.3 through 1.25.0.\n\nUsers are recommended to upgrade to version 1.26.0 which fixes the issue."
              },
              "id": "CVE-2024-25710_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2024-25710-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "5.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2024-25710] org.apache.commons:commons-compress 1.15"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.19]   |",
                "text": "The file name encoding algorithm used internally in Apache Commons Compress 1.15 to 1.18 can get into an infinite loop when faced with specially crafted inputs. This can lead to a denial of service attack if an attacker can choose the file names inside of an archive created by Compress."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `org.apache.commons:commons-compress 1.15`       | [1.19]   |",
                "text": "The file name encoding algorithm used internally in Apache Commons Compress 1.15 to 1.18 can get into an infinite loop when faced with specially crafted inputs. This can lead to a denial of service attack if an attacker can choose the file names inside of an archive created by Compress."
              },
              "id": "CVE-2019-12402_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2019-12402-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2019-12402] org.apache.commons:commons-compress 1.15"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted TAR archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' tar package."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted TAR archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' tar package."
              },
              "id": "CVE-2021-35517_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2021-35517-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2021-35517] org.apache.commons:commons-compress 1.15"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted 7Z archive, the construction of the list of codecs that decompress an entry can result in an infinite loop. This could be used to mount a denial of service attack against services that use Compress' sevenz package."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted 7Z archive, the construction of the list of codecs that decompress an entry can result in an infinite loop. This could be used to mount a denial of service attack against services that use Compress' sevenz package."
              },
              "id": "CVE-2021-35515_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2021-35515-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2021-35515] org.apache.commons:commons-compress 1.15"
              }
            },
            {
              "fullDescription": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted ZIP archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' zip package."
              },
              "help": {
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `org.apache.commons:commons-compress 1.15`       | [1.21]   |",
                "text": "When reading a specially crafted ZIP archive, Compress can be made to allocate large amounts of memory that finally leads to an out of memory error even for very small inputs. This could be used to mount a denial of service attack against services that use Compress' zip package."
              },
              "id": "CVE-2021-36090_org.apache.commons:commons-compress_1.15",
              "name": "CVE-2021-36090-org.apache.commons:commons-compress-1.15",
              "properties": {
                "impactPaths": [
                  [
                    {
                      "name": "com.logpresso:log4j2-scanner",
                      "version": "3.0.1"
                    },
                    {
                      "name": "org.apache.commons:commons-compress",
                      "version": "1.15"
                    }
                  ]
                ],
                "security-severity": "7.5"
              },
              "relationships": [],
              "shortDescription": {
                "text": "[CVE-2021-36090] org.apache.commons:commons-compress 1.15"
              }
            }
          ],
          "supportedTaxonomies": [],
          "taxa": [],
          "version": "3.127.2"
        },
        "extensions": []
      },
      "translations": [],
      "versionControlProvenance": [],
      "webRequests": [],
      "webResponses": []
    },
    {
      "addresses": [],
      "graphs": [],
      "invocations": [
        {
          "arguments": [
            "/Users/assafa/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/var/folders/xv/th4cksxn7jv9wjrdnn1h4tj00000gq/T/jfrog.cli.temp.-1756385370-1617329596/Secrets_1756385372_4/config.yaml"
          ],
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": 0,
            "uri": "file:///Users/assafa/Documents/code/other-projects/terragoat"
          }
        }
      ],
      "language": "en-US",
      "logicalLocations": [],
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "policies": [],
      "redactionTokens": [],
      "results": [
        {
          "partialFingerprints": {
            "jfrogSecret": "29c4da92de7b84cf156edb6a683db177d66a7a38672fc46f0514ee82fa46c7c0"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/ec2.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 70,
                  "endLine": 16,
                  "snippet": {
                    "text": "AWS_S**********"
                  },
                  "startColumn": 8,
                  "startLine": 16
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "1e4f1948ed9701d96ec631995f1057e4f5ab26bbde8a81e74695d0c908138419"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 51,
                  "endLine": 102,
                  "snippet": {
                    "text": "admin**********"
                  },
                  "startColumn": 3,
                  "startLine": 102
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "1e4f1948ed9701d96ec631995f1057e4f5ab26bbde8a81e74695d0c908138419"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 51,
                  "endLine": 121,
                  "snippet": {
                    "text": "admin**********"
                  },
                  "startColumn": 3,
                  "startLine": 121
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "1e4f1948ed9701d96ec631995f1057e4f5ab26bbde8a81e74695d0c908138419"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 51,
                  "endLine": 140,
                  "snippet": {
                    "text": "admin**********"
                  },
                  "startColumn": 3,
                  "startLine": 140
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "1e4f1948ed9701d96ec631995f1057e4f5ab26bbde8a81e74695d0c908138419"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 51,
                  "endLine": 26,
                  "snippet": {
                    "text": "admin**********"
                  },
                  "startColumn": 3,
                  "startLine": 26
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "1e4f1948ed9701d96ec631995f1057e4f5ab26bbde8a81e74695d0c908138419"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 51,
                  "endLine": 45,
                  "snippet": {
                    "text": "admin**********"
                  },
                  "startColumn": 3,
                  "startLine": 45
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "1e4f1948ed9701d96ec631995f1057e4f5ab26bbde8a81e74695d0c908138419"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 51,
                  "endLine": 64,
                  "snippet": {
                    "text": "admin**********"
                  },
                  "startColumn": 3,
                  "startLine": 64
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "1e4f1948ed9701d96ec631995f1057e4f5ab26bbde8a81e74695d0c908138419"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 51,
                  "endLine": 83,
                  "snippet": {
                    "text": "admin**********"
                  },
                  "startColumn": 3,
                  "startLine": 83
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded secrets were found",
            "text": "Hardcoded secrets were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogSecret": "267ad497683d14613f4fbc7d8c6417bc40d51a0234ba65eb98337127c891199d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/ec2.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 40,
                  "endLine": 16,
                  "snippet": {
                    "text": "wJalr**********"
                  },
                  "startColumn": 30,
                  "startLine": 16
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Secret keys were found",
            "text": "Secret keys were found"
          },
          "properties": {
            "metadata": "",
            "tokenValidation": ""
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "REQ.SECRET.KEYS",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        }
      ],
      "runAggregates": [],
      "taxonomies": [],
      "threadFlowLocations": [],
      "tool": {
        "driver": {
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "isComprehensive": false,
          "language": "en-US",
          "locations": [],
          "name": "JFrog Secrets scanner",
          "notifications": [],
          "rules": [
            {
              "fullDescription": {
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "help": {
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "id": "REQ.SECRET.GENERIC.TEXT",
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "origin": "jfrog",
                "scanner_id": "1681",
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              }
            },
            {
              "fullDescription": {
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "help": {
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "id": "REQ.SECRET.GENERIC.CODE",
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private",
                "origin": "jfrog",
                "scanner_id": "1685"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              }
            },
            {
              "fullDescription": {
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "help": {
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "id": "REQ.SECRET.KEYS",
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "origin": "jfrog",
                "scanner_id": "1235",
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              }
            },
            {
              "fullDescription": {
                "markdown": "",
                "text": ""
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "id": "REQ.CRED.PUBLIC-ONLY",
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private",
                "origin": "jfrog",
                "scanner_id": "125",
                "undetermined_reason": ""
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for REQ.CRED.PUBLIC-ONLY"
              }
            },
            {
              "fullDescription": {
                "markdown": "",
                "text": ""
              },
              "help": {
                "markdown": "",
                "text": ""
              },
              "id": "REQ.CUSTOM_SCANNER-10000-my-test-custom-scanner",
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private",
                "origin": "custom",
                "scanner_id": "10000",
                "undetermined_reason": ""
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for REQ.CUSTOM_SCANNER-10000-my-test-custom-scanner"
              }
            },
            {
              "fullDescription": {
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "help": {
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "id": "REQ.SECRET.GENERIC.URL-TEXT",
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private",
                "scanner_id": "1683"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL-TEXT"
              }
            }
          ],
          "supportedTaxonomies": [],
          "taxa": [],
          "version": "1.0"
        },
        "extensions": []
      },
      "translations": [],
      "versionControlProvenance": [],
      "webRequests": [],
      "webResponses": []
    },
    {
      "addresses": [],
      "graphs": [],
      "invocations": [
        {
          "arguments": [
            "/Users/assafa/.jfrog/dependencies/analyzerManager/iac_scanner/tf_scanner",
            "scan",
            "/var/folders/xv/th4cksxn7jv9wjrdnn1h4tj00000gq/T/jfrog.cli.temp.-1756385370-1617329596/IaC_1756385383_1/config.yaml"
          ],
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": 0,
            "uri": "file:///Users/assafa/Documents/code/other-projects/terragoat"
          }
        }
      ],
      "language": "en-US",
      "logicalLocations": [],
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "policies": [],
      "redactionTokens": [],
      "results": [
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "5dee5a0ce3b1cf5342f02b98297fed3e113679d120bdd80863179d699d0b818d"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "5dee5a0ce3b1cf5342f02b98297fed3e113679d120bdd80863179d699d0b818d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/db-app.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 42,
                  "snippet": {
                    "text": "default"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_instance",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "5dee5a0ce3b1cf5342f02b98297fed3e113679d120bdd80863179d699d0b818d"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "5dee5a0ce3b1cf5342f02b98297fed3e113679d120bdd80863179d699d0b818d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/db-app.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 42,
                  "snippet": {
                    "text": "default"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "iam_database_authentication_enabled=False was detected",
            "text": "iam_database_authentication_enabled=False was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_iam_auth",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "5dee5a0ce3b1cf5342f02b98297fed3e113679d120bdd80863179d699d0b818d"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "5dee5a0ce3b1cf5342f02b98297fed3e113679d120bdd80863179d699d0b818d"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/db-app.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 42,
                  "snippet": {
                    "text": "default"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "publicly_accessible=true was detected",
            "text": "publicly_accessible=true was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "60479120dd5204cd05c2ae2fca9e07e67dcb3f7c23f9a25cc2ce03d61a25ecbe"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "60479120dd5204cd05c2ae2fca9e07e67dcb3f7c23f9a25cc2ce03d61a25ecbe"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/ec2.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 51,
                  "snippet": {
                    "text": "web_host_storage"
                  },
                  "startColumn": 1,
                  "startLine": 34
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "encrypted=true was not detected for AWS EBS Volume",
            "text": "encrypted=true was not detected for AWS EBS Volume"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_ebs_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/ec2.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 288,
                  "snippet": {
                    "text": "flowbucket"
                  },
                  "startColumn": 1,
                  "startLine": 271
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/ec2.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 288,
                  "snippet": {
                    "text": "flowbucket"
                  },
                  "startColumn": 1,
                  "startLine": 271
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/ec2.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 288,
                  "snippet": {
                    "text": "flowbucket"
                  },
                  "startColumn": 1,
                  "startLine": 271
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_acls=false was detected",
            "text": "block_public_acls=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_acl",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "e83a0ec024da715d871859731e88a69d932f7a01d27628bfed125759e331c26c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/ec2.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 288,
                  "snippet": {
                    "text": "flowbucket"
                  },
                  "startColumn": 1,
                  "startLine": 271
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_policy=false was detected",
            "text": "block_public_policy=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_policy",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "7f649fbac8baeb138d7c8fe8db1caabb81dcc7bfb83b9c1b5869e19b945c039c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "7f649fbac8baeb138d7c8fe8db1caabb81dcc7bfb83b9c1b5869e19b945c039c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/providers.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 13,
                  "endLine": 10,
                  "snippet": {
                    "text": "access_key"
                  },
                  "startColumn": 3,
                  "startLine": 10
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded access keys found for AWS Provider",
            "text": "Hardcoded access keys found for AWS Provider"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_provider_creds",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "21d63f581d648ddba5178ad4885e6e991bc6094f0f1fe9e0f65577d6e36060dd"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "21d63f581d648ddba5178ad4885e6e991bc6094f0f1fe9e0f65577d6e36060dd"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/providers.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 13,
                  "endLine": 11,
                  "snippet": {
                    "text": "secret_key"
                  },
                  "startColumn": 3,
                  "startLine": 11
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Hardcoded access keys found for AWS Provider",
            "text": "Hardcoded access keys found for AWS Provider"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_provider_creds",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "db4a83edc5a93117a61e185855d9350dde4abbc80a23f32b633c69814a1f877a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "db4a83edc5a93117a61e185855d9350dde4abbc80a23f32b633c69814a1f877a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 15,
                  "snippet": {
                    "text": "app1-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "b9d7f4abdb78a205c472373b455abda6306c3340f5a0dd1aae562f3095453784"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "b9d7f4abdb78a205c472373b455abda6306c3340f5a0dd1aae562f3095453784"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 31,
                  "snippet": {
                    "text": "app2-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 17
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "f5c3eb50f0fcaab76d2ac6f963b0532b15603e90415292e70d429b76d1294412"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "f5c3eb50f0fcaab76d2ac6f963b0532b15603e90415292e70d429b76d1294412"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 47,
                  "snippet": {
                    "text": "app3-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 33
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "4b99bc13c60133985d231ef34cf2c38675ee56867590f5d9bd4657becb266910"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "4b99bc13c60133985d231ef34cf2c38675ee56867590f5d9bd4657becb266910"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 63,
                  "snippet": {
                    "text": "app4-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 49
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "8d0806ff50f3e2ed8e865382cb3a4c5e0be4c2f559dfdf74e4774a27b5e2051b"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "8d0806ff50f3e2ed8e865382cb3a4c5e0be4c2f559dfdf74e4774a27b5e2051b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 79,
                  "snippet": {
                    "text": "app5-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 65
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "c30c838297150db06c2c289e40b14dcc0524e13c1fef2aec6ec752e13ad46e90"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "c30c838297150db06c2c289e40b14dcc0524e13c1fef2aec6ec752e13ad46e90"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 95,
                  "snippet": {
                    "text": "app6-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 81
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "62e3ef8e6f42405cb34974020a3016c05ded3da5aa9f36519189b77c3a3549ce"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "62e3ef8e6f42405cb34974020a3016c05ded3da5aa9f36519189b77c3a3549ce"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 111,
                  "snippet": {
                    "text": "app7-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 97
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "184951f7d69747a22b9718b19f9054276cc0cef7a29fa125cd697ccbf624d7d2"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "184951f7d69747a22b9718b19f9054276cc0cef7a29fa125cd697ccbf624d7d2"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 128,
                  "snippet": {
                    "text": "app8-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 113
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "b2eabcaa12f2abf77e100bbd23ad207f7f7eb1d3d3efc80763eab164284f4a62"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "b2eabcaa12f2abf77e100bbd23ad207f7f7eb1d3d3efc80763eab164284f4a62"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/rds.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 144,
                  "snippet": {
                    "text": "app9-rds-cluster"
                  },
                  "startColumn": 1,
                  "startLine": 130
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "storage_encrypted=false was detected",
            "text": "storage_encrypted=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_rds_encrypt_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 21,
                  "snippet": {
                    "text": "data"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 21,
                  "snippet": {
                    "text": "data"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 21,
                  "snippet": {
                    "text": "data"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_acls=false was detected",
            "text": "block_public_acls=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_acl",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "4296c8aa83bc668ac62ed0370a47792e0bbe40d9aab4b2be14c85c548306470c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 21,
                  "snippet": {
                    "text": "data"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_policy=false was detected",
            "text": "block_public_policy=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_policy",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "aef9df40432e9d6feb00400551d04be90fef648e5fb4add5717a2a455d40d189"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "aef9df40432e9d6feb00400551d04be90fef648e5fb4add5717a2a455d40d189"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 40,
                  "snippet": {
                    "text": "data_object"
                  },
                  "startColumn": 1,
                  "startLine": 23
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "server_side_encryption='' was detected",
            "text": "server_side_encryption='' was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt_object",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 63,
                  "snippet": {
                    "text": "financials"
                  },
                  "startColumn": 1,
                  "startLine": 42
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 63,
                  "snippet": {
                    "text": "financials"
                  },
                  "startColumn": 1,
                  "startLine": 42
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 63,
                  "snippet": {
                    "text": "financials"
                  },
                  "startColumn": 1,
                  "startLine": 42
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_acls=false was detected",
            "text": "block_public_acls=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_acl",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "73433abecef0efec0867916179c292dcb7a52e40b4dbcd74a8a8bce15063241a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 63,
                  "snippet": {
                    "text": "financials"
                  },
                  "startColumn": 1,
                  "startLine": 42
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_policy=false was detected",
            "text": "block_public_policy=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_policy",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 87,
                  "snippet": {
                    "text": "operations"
                  },
                  "startColumn": 1,
                  "startLine": 65
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 87,
                  "snippet": {
                    "text": "operations"
                  },
                  "startColumn": 1,
                  "startLine": 65
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 87,
                  "snippet": {
                    "text": "operations"
                  },
                  "startColumn": 1,
                  "startLine": 65
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_acls=false was detected",
            "text": "block_public_acls=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_acl",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "6e8d0af09a6ef5fd2bf55964909bf0f5818924e89dcd44ade15a892a14d2e0a5"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 87,
                  "snippet": {
                    "text": "operations"
                  },
                  "startColumn": 1,
                  "startLine": 65
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_policy=false was detected",
            "text": "block_public_policy=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_policy",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 111,
                  "snippet": {
                    "text": "data_science"
                  },
                  "startColumn": 1,
                  "startLine": 89
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 111,
                  "snippet": {
                    "text": "data_science"
                  },
                  "startColumn": 1,
                  "startLine": 89
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 111,
                  "snippet": {
                    "text": "data_science"
                  },
                  "startColumn": 1,
                  "startLine": 89
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_acls=false was detected",
            "text": "block_public_acls=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_acl",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "3eea175f28eef2b0c9fbb77d7e053abd29cf00a776e4b63ae9ce91304a4c02e8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 111,
                  "snippet": {
                    "text": "data_science"
                  },
                  "startColumn": 1,
                  "startLine": 89
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_policy=false was detected",
            "text": "block_public_policy=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_policy",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "66d18124205cd82b03dd80dddc2f77727b9712f555f5a7a22483c45e7675feaa"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "66d18124205cd82b03dd80dddc2f77727b9712f555f5a7a22483c45e7675feaa"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 141,
                  "snippet": {
                    "text": "logs"
                  },
                  "startColumn": 1,
                  "startLine": 113
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected",
            "text": "Missing server_side_encryption_configuration was detected, Missing aws_s3_bucket_server_side_encryption_configuration was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "66d18124205cd82b03dd80dddc2f77727b9712f555f5a7a22483c45e7675feaa"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "66d18124205cd82b03dd80dddc2f77727b9712f555f5a7a22483c45e7675feaa"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 141,
                  "snippet": {
                    "text": "logs"
                  },
                  "startColumn": 1,
                  "startLine": 113
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_acls=false was detected",
            "text": "block_public_acls=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_acl",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "66d18124205cd82b03dd80dddc2f77727b9712f555f5a7a22483c45e7675feaa"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "66d18124205cd82b03dd80dddc2f77727b9712f555f5a7a22483c45e7675feaa"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/aws/s3.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 141,
                  "snippet": {
                    "text": "logs"
                  },
                  "startColumn": 1,
                  "startLine": 113
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "block_public_policy=false was detected",
            "text": "block_public_policy=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "aws_s3_block_public_policy",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "208cf5ab49ca99b28130ce679c004dbfac495c689dbda09c458e55bf5327400a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "208cf5ab49ca99b28130ce679c004dbfac495c689dbda09c458e55bf5327400a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 18,
                  "snippet": {
                    "text": "security_storage_account"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Public access level for storage containers and blobs was detected",
            "text": "Public access level for storage containers and blobs was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_storage_no_public_account",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "208cf5ab49ca99b28130ce679c004dbfac495c689dbda09c458e55bf5327400a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "208cf5ab49ca99b28130ce679c004dbfac495c689dbda09c458e55bf5327400a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/mssql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 18,
                  "snippet": {
                    "text": "security_storage_account"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Allow untrusted services was detected",
            "text": "Allow untrusted services was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_trusted_bypass",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "2a3f0c46b95c4df7725bbd4efe4b9d3d628e460db1d41a322c3edec52e4c76cf"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "2a3f0c46b95c4df7725bbd4efe4b9d3d628e460db1d41a322c3edec52e4c76cf"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/sql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 71,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 44
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing threat detection was detected",
            "text": "Missing threat detection was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_mysql_threat_detection",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "2a3f0c46b95c4df7725bbd4efe4b9d3d628e460db1d41a322c3edec52e4c76cf"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "2a3f0c46b95c4df7725bbd4efe4b9d3d628e460db1d41a322c3edec52e4c76cf"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/sql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 71,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 44
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Public access to MySQL was detected",
            "text": "Public access to MySQL was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_mysql_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "2a3f0c46b95c4df7725bbd4efe4b9d3d628e460db1d41a322c3edec52e4c76cf"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "2a3f0c46b95c4df7725bbd4efe4b9d3d628e460db1d41a322c3edec52e4c76cf"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/sql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 71,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 44
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing TLS was detected",
            "text": "Missing TLS was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_mysql_tls",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "f91dec48ec1b1fea43316bc08ac1898edca96d1b14d45d8f93706701b8283c22"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "f91dec48ec1b1fea43316bc08ac1898edca96d1b14d45d8f93706701b8283c22"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/sql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 96,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 73
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing threat detection was detected",
            "text": "Missing threat detection was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_postgresql_threat_detection",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "f91dec48ec1b1fea43316bc08ac1898edca96d1b14d45d8f93706701b8283c22"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "f91dec48ec1b1fea43316bc08ac1898edca96d1b14d45d8f93706701b8283c22"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/sql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 96,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 73
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Public access to PostgreSQL was detected",
            "text": "Public access to PostgreSQL was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_postgresql_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "f91dec48ec1b1fea43316bc08ac1898edca96d1b14d45d8f93706701b8283c22"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "f91dec48ec1b1fea43316bc08ac1898edca96d1b14d45d8f93706701b8283c22"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/sql.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 96,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 73
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing TLS was detected",
            "text": "Missing TLS was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_postgresql_tls",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "8b68a93cd861af847ca1d729ef876e79fd3fc337cc440af47e6449d4f56ccf6b"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "8b68a93cd861af847ca1d729ef876e79fd3fc337cc440af47e6449d4f56ccf6b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/storage.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 21,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "No encryption was detected",
            "text": "No encryption was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_compute_encrypt",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "d81a265ddd12b4c690fdf03339778b5595cf5b41c1d107d4686ef98e672b27be"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "d81a265ddd12b4c690fdf03339778b5595cf5b41c1d107d4686ef98e672b27be"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/storage.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 60,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 23
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Public access level for storage containers and blobs was detected",
            "text": "Public access level for storage containers and blobs was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_storage_no_public_account",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "d81a265ddd12b4c690fdf03339778b5595cf5b41c1d107d4686ef98e672b27be"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "d81a265ddd12b4c690fdf03339778b5595cf5b41c1d107d4686ef98e672b27be"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/azure/storage.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 60,
                  "snippet": {
                    "text": "example"
                  },
                  "startColumn": 1,
                  "startLine": 23
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Allow untrusted services was detected",
            "text": "Allow untrusted services was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "azure_trusted_bypass",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "d02fa09942db95c2c45fba8bf4ec439c85e5f6c4dc905ca5bca6462e8580c55a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "d02fa09942db95c2c45fba8bf4ec439c85e5f6c4dc905ca5bca6462e8580c55a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/big_data.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 19,
                  "snippet": {
                    "text": "google_sql_database_instance"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "private_network was not detected, authorized_networks=0.0.0.0/0 was detected",
            "text": "private_network was not detected, authorized_networks=0.0.0.0/0 was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_sql_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "d02fa09942db95c2c45fba8bf4ec439c85e5f6c4dc905ca5bca6462e8580c55a"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "d02fa09942db95c2c45fba8bf4ec439c85e5f6c4dc905ca5bca6462e8580c55a"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/big_data.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 19,
                  "snippet": {
                    "text": "google_sql_database_instance"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "private_network was not detected, authorized_networks=0.0.0.0/0 was detected",
            "text": "private_network was not detected, authorized_networks=0.0.0.0/0 was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_sql_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "6a29299d81a30b5cd74780fa53f8410c4ef05b89b69a179496545112a7583dc2"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "6a29299d81a30b5cd74780fa53f8410c4ef05b89b69a179496545112a7583dc2"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/big_data.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 19,
                  "snippet": {
                    "text": "master_instance"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing backup of CloudSQL instances was detected",
            "text": "Missing backup of CloudSQL instances was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_sql_backup",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "6a29299d81a30b5cd74780fa53f8410c4ef05b89b69a179496545112a7583dc2"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "6a29299d81a30b5cd74780fa53f8410c4ef05b89b69a179496545112a7583dc2"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/big_data.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 19,
                  "snippet": {
                    "text": "master_instance"
                  },
                  "startColumn": 1,
                  "startLine": 1
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "No TLS for CloudSQL was detected",
            "text": "No TLS for CloudSQL was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_sql_tls",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "c8fddc457e2bba7398ec1caee1f4714a0d7036c72cb04fdeee95c5c855f5c51b"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "c8fddc457e2bba7398ec1caee1f4714a0d7036c72cb04fdeee95c5c855f5c51b"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/big_data.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 37,
                  "snippet": {
                    "text": "dataset"
                  },
                  "startColumn": 1,
                  "startLine": 21
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Public access to BigQuery datasets was detected",
            "text": "Public access to BigQuery datasets was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_bigquery_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "ddbc70a7dbee03f7e1cb0635509f8d0265a07e3ecb25200b3d50bdb178e3cbb6"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "ddbc70a7dbee03f7e1cb0635509f8d0265a07e3ecb25200b3d50bdb178e3cbb6"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/gcs.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 21,
                  "snippet": {
                    "text": "allow_public_read"
                  },
                  "startColumn": 1,
                  "startLine": 17
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Publicly accessible bucket (members) was detected",
            "text": "Publicly accessible bucket (members) was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gsb_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/gke.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 22,
                  "snippet": {
                    "text": "workload_cluster"
                  },
                  "startColumn": 1,
                  "startLine": 6
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Legacy ABAC authorization was detected",
            "text": "Legacy ABAC authorization was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gke_legacy_auth_abac",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/gke.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 22,
                  "snippet": {
                    "text": "workload_cluster"
                  },
                  "startColumn": 1,
                  "startLine": 6
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "enable_private_nodes=false was detected, enable_private_endpoint=false was detected",
            "text": "enable_private_nodes=false was detected, enable_private_endpoint=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gke_private_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/gke.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 22,
                  "snippet": {
                    "text": "workload_cluster"
                  },
                  "startColumn": 1,
                  "startLine": 6
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "enable_private_nodes=false was detected, enable_private_endpoint=false was detected",
            "text": "enable_private_nodes=false was detected, enable_private_endpoint=false was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gke_private_cluster",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "0fa8e4d0c13fc5aa9256ee5aac774ff4bba34f92193f95f835351328009a09bb"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/gke.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 22,
                  "snippet": {
                    "text": "workload_cluster"
                  },
                  "startColumn": 1,
                  "startLine": 6
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Public access (0.0.0.0/0) to the container control plane was detected",
            "text": "Public access (0.0.0.0/0) to the container control plane was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gke_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "4da280cbd1ad98e029105ebd2396225adb2d24132ffb2540e8602b0872c181b8"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "4da280cbd1ad98e029105ebd2396225adb2d24132ffb2540e8602b0872c181b8"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/gke.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 31,
                  "snippet": {
                    "text": "custom_node_pool"
                  },
                  "startColumn": 1,
                  "startLine": 24
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Missing auto upgrade was detected",
            "text": "Missing auto upgrade was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gke_auto_upgrade",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "eb1e70604331ab5c875694496d6f84d20414a822b09b3de5b2d430252f8e29b3"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "eb1e70604331ab5c875694496d6f84d20414a822b09b3de5b2d430252f8e29b3"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/instances.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 2,
                  "endLine": 34,
                  "snippet": {
                    "text": "server"
                  },
                  "startColumn": 1,
                  "startLine": 3
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Enabled serial-port was detected",
            "text": "Enabled serial-port was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gce_disable_serial",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        },
        {
          "partialFingerprints": {
            "jfrogCodeIaCPath": "ed94a4eb2ec1ee6a2c2318c8d1b2f9e142c948f3cf15e30dad73a4f454f84e2c"
          },
          "fingerprints": {
            "jfrogCodeIaCPath": "ed94a4eb2ec1ee6a2c2318c8d1b2f9e142c948f3cf15e30dad73a4f454f84e2c"
          },
          "attachments": [],
          "codeFlows": [],
          "fixes": [],
          "graphTraversals": [],
          "graphs": [],
          "level": "error",
          "locations": [
            {
              "annotations": [],
              "id": 0,
              "logicalLocations": [],
              "physicalLocation": {
                "artifactLocation": {
                  "index": -1,
                  "uri": "terraform/gcp/instances.tf"
                },
                "region": {
                  "byteOffset": 0,
                  "charOffset": 0,
                  "endColumn": 18,
                  "endLine": 15,
                  "snippet": {
                    "text": "access_config"
                  },
                  "startColumn": 5,
                  "startLine": 15
                }
              },
              "relationships": []
            }
          ],
          "message": {
            "arguments": [],
            "markdown": "Public access to compute instances was detected",
            "text": "Public access to compute instances was detected"
          },
          "rank": -1,
          "relatedLocations": [],
          "ruleId": "gcp_gce_no_public",
          "ruleIndex": 0,
          "stacks": [],
          "taxa": []
        }
      ],
      "runAggregates": [],
      "taxonomies": [],
      "threadFlowLocations": [],
      "tool": {
        "driver": {
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/infrastructure-as-code-iac",
          "isComprehensive": false,
          "language": "en-US",
          "locations": [],
          "name": "JFrog Terraform scanner",
          "notifications": [],
          "rules": [
            {
              "fullDescription": {
                "markdown": "Resource `aws_ebs_volume` should have `encrypted=true`. Alternatively, if resource `aws_ebs_volume` exists, then resource `aws_ebs_encryption_by_default` should exist with key `enabled=true` (default is `true`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_ebs_volume\" \"vulnerable_example\" {\r\n  # encrypted is not set (or false)\r\n}\r\n```\r\n\r\nSecure example #1 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example\" {\r\n  encrypted = true\r\n}\r\n```\r\n\r\nSecure example #2 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example_2\" {\r\n}\r\n\r\nresource \"aws_ebs_encryption_by_default\" \"secure_example_2\" {\r\n  enabled = true  # or unset\r\n}\r\n```",
                "text": "Resource `aws_ebs_volume` should have `encrypted=true`. Alternatively, if resource `aws_ebs_volume` exists, then resource `aws_ebs_encryption_by_default` should exist with key `enabled=true` (default is `true`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_ebs_volume\" \"vulnerable_example\" {\r\n  # encrypted is not set (or false)\r\n}\r\n```\r\n\r\nSecure example #1 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example\" {\r\n  encrypted = true\r\n}\r\n```\r\n\r\nSecure example #2 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example_2\" {\r\n}\r\n\r\nresource \"aws_ebs_encryption_by_default\" \"secure_example_2\" {\r\n  enabled = true  # or unset\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `aws_ebs_volume` should have `encrypted=true`. Alternatively, if resource `aws_ebs_volume` exists, then resource `aws_ebs_encryption_by_default` should exist with key `enabled=true` (default is `true`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_ebs_volume\" \"vulnerable_example\" {\r\n  # encrypted is not set (or false)\r\n}\r\n```\r\n\r\nSecure example #1 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example\" {\r\n  encrypted = true\r\n}\r\n```\r\n\r\nSecure example #2 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example_2\" {\r\n}\r\n\r\nresource \"aws_ebs_encryption_by_default\" \"secure_example_2\" {\r\n  enabled = true  # or unset\r\n}\r\n```",
                "text": "Resource `aws_ebs_volume` should have `encrypted=true`. Alternatively, if resource `aws_ebs_volume` exists, then resource `aws_ebs_encryption_by_default` should exist with key `enabled=true` (default is `true`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_ebs_volume\" \"vulnerable_example\" {\r\n  # encrypted is not set (or false)\r\n}\r\n```\r\n\r\nSecure example #1 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example\" {\r\n  encrypted = true\r\n}\r\n```\r\n\r\nSecure example #2 - \r\n```\r\nresource \"aws_ebs_volume\" \"secure_example_2\" {\r\n}\r\n\r\nresource \"aws_ebs_encryption_by_default\" \"secure_example_2\" {\r\n  enabled = true  # or unset\r\n}\r\n```"
              },
              "id": "aws_ebs_encrypt",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_ebs_encrypt"
              }
            },
            {
              "fullDescription": {
                "markdown": "Provider `aws` should never set `access_key` or `secret_key`.\nInstead of setting these keys, AWS provider credentials can be provided by -\n1. Environment variables\n2. Shared credentials files\n3. Shared configuration files\n4. Container credentials\n5. Instance profile credentials and region\n\nSee Terraform's [Authentication and Configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication-and-configuration) for more details\n\nVulnerable example -\n```\nprovider \"aws\" {\n    region     = \"us-west-2\"\n    access_key = \"my-access-key\"\n    secret_key = \"my-secret-key\"\n}\n```\n\nSecure example #1 -\n```\nprovider \"aws\" {\n  shared_config_files      = [\"/Users/tf_user/.aws/conf\"]\n  shared_credentials_files = [\"/Users/tf_user/.aws/creds\"]\n  profile                  = \"customprofile\"\n}\n```\n(using configuration files)\n\nSecure example #2 -\n```\n$ export AWS_ACCESS_KEY_ID=\"my-access-key\"\n$ export AWS_SECRET_ACCESS_KEY=\"my-secret-key\"\n$ export AWS_REGION=\"us-west-2\"\n$ terraform plan\n```\n(using environment variables)",
                "text": "Provider `aws` should never set `access_key` or `secret_key`.\nInstead of setting these keys, AWS provider credentials can be provided by -\n1. Environment variables\n2. Shared credentials files\n3. Shared configuration files\n4. Container credentials\n5. Instance profile credentials and region\n\nSee Terraform's [Authentication and Configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication-and-configuration) for more details\n\nVulnerable example -\n```\nprovider \"aws\" {\n    region     = \"us-west-2\"\n    access_key = \"my-access-key\"\n    secret_key = \"my-secret-key\"\n}\n```\n\nSecure example #1 -\n```\nprovider \"aws\" {\n  shared_config_files      = [\"/Users/tf_user/.aws/conf\"]\n  shared_credentials_files = [\"/Users/tf_user/.aws/creds\"]\n  profile                  = \"customprofile\"\n}\n```\n(using configuration files)\n\nSecure example #2 -\n```\n$ export AWS_ACCESS_KEY_ID=\"my-access-key\"\n$ export AWS_SECRET_ACCESS_KEY=\"my-secret-key\"\n$ export AWS_REGION=\"us-west-2\"\n$ terraform plan\n```\n(using environment variables)"
              },
              "help": {
                "markdown": "Provider `aws` should never set `access_key` or `secret_key`.\nInstead of setting these keys, AWS provider credentials can be provided by -\n1. Environment variables\n2. Shared credentials files\n3. Shared configuration files\n4. Container credentials\n5. Instance profile credentials and region\n\nSee Terraform's [Authentication and Configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication-and-configuration) for more details\n\nVulnerable example -\n```\nprovider \"aws\" {\n    region     = \"us-west-2\"\n    access_key = \"my-access-key\"\n    secret_key = \"my-secret-key\"\n}\n```\n\nSecure example #1 -\n```\nprovider \"aws\" {\n  shared_config_files      = [\"/Users/tf_user/.aws/conf\"]\n  shared_credentials_files = [\"/Users/tf_user/.aws/creds\"]\n  profile                  = \"customprofile\"\n}\n```\n(using configuration files)\n\nSecure example #2 -\n```\n$ export AWS_ACCESS_KEY_ID=\"my-access-key\"\n$ export AWS_SECRET_ACCESS_KEY=\"my-secret-key\"\n$ export AWS_REGION=\"us-west-2\"\n$ terraform plan\n```\n(using environment variables)",
                "text": "Provider `aws` should never set `access_key` or `secret_key`.\nInstead of setting these keys, AWS provider credentials can be provided by -\n1. Environment variables\n2. Shared credentials files\n3. Shared configuration files\n4. Container credentials\n5. Instance profile credentials and region\n\nSee Terraform's [Authentication and Configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication-and-configuration) for more details\n\nVulnerable example -\n```\nprovider \"aws\" {\n    region     = \"us-west-2\"\n    access_key = \"my-access-key\"\n    secret_key = \"my-secret-key\"\n}\n```\n\nSecure example #1 -\n```\nprovider \"aws\" {\n  shared_config_files      = [\"/Users/tf_user/.aws/conf\"]\n  shared_credentials_files = [\"/Users/tf_user/.aws/creds\"]\n  profile                  = \"customprofile\"\n}\n```\n(using configuration files)\n\nSecure example #2 -\n```\n$ export AWS_ACCESS_KEY_ID=\"my-access-key\"\n$ export AWS_SECRET_ACCESS_KEY=\"my-secret-key\"\n$ export AWS_REGION=\"us-west-2\"\n$ terraform plan\n```\n(using environment variables)"
              },
              "id": "aws_provider_creds",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_provider_creds"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `aws_rds_cluster` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_rds_cluster\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_rds_cluster\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```",
                "text": "Resource `aws_rds_cluster` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_rds_cluster\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_rds_cluster\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `aws_rds_cluster` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_rds_cluster\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_rds_cluster\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```",
                "text": "Resource `aws_rds_cluster` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_rds_cluster\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_rds_cluster\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```"
              },
              "id": "aws_rds_encrypt_cluster",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_rds_encrypt_cluster"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `aws_db_instance` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```",
                "text": "Resource `aws_db_instance` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `aws_db_instance` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```",
                "text": "Resource `aws_db_instance` should have `storage_encrypted=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # storage_encrypted is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  kms_key_id  = aws_kms_key.example.arn\r\n  storage_encrypted = true\r\n}\r\n```"
              },
              "id": "aws_rds_encrypt_instance",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_rds_encrypt_instance"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `aws_db_instance` should have `iam_database_authentication_enabled=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # iam_database_authentication_enabled is unset (or false)\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  iam_database_authentication_enabled = true\r\n}\r\n```",
                "text": "Resource `aws_db_instance` should have `iam_database_authentication_enabled=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # iam_database_authentication_enabled is unset (or false)\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  iam_database_authentication_enabled = true\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `aws_db_instance` should have `iam_database_authentication_enabled=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # iam_database_authentication_enabled is unset (or false)\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  iam_database_authentication_enabled = true\r\n}\r\n```",
                "text": "Resource `aws_db_instance` should have `iam_database_authentication_enabled=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  # iam_database_authentication_enabled is unset (or false)\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  iam_database_authentication_enabled = true\r\n}\r\n```"
              },
              "id": "aws_rds_iam_auth",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_rds_iam_auth"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `aws_db_instance` should have `publicly_accessible=false` (default is `false`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  publicly_accessible = true\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  # publicly_accessible is not set\r\n}\r\n```",
                "text": "Resource `aws_db_instance` should have `publicly_accessible=false` (default is `false`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  publicly_accessible = true\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  # publicly_accessible is not set\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `aws_db_instance` should have `publicly_accessible=false` (default is `false`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  publicly_accessible = true\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  # publicly_accessible is not set\r\n}\r\n```",
                "text": "Resource `aws_db_instance` should have `publicly_accessible=false` (default is `false`)\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_db_instance\" \"vulnerable_example\" {\r\n  publicly_accessible = true\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_db_instance\" \"secure_example\" {\r\n  # publicly_accessible is not set\r\n}\r\n```"
              },
              "id": "aws_rds_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_rds_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_acls=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_acls is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_acls = true\r\n}\r\n```",
                "text": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_acls=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_acls is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_acls = true\r\n}\r\n```"
              },
              "help": {
                "markdown": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_acls=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_acls is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_acls = true\r\n}\r\n```",
                "text": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_acls=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_acls is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_acls = true\r\n}\r\n```"
              },
              "id": "aws_s3_block_public_acl",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_s3_block_public_acl"
              }
            },
            {
              "fullDescription": {
                "markdown": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_policy=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_policy is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_policy = true\r\n}\r\n```",
                "text": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_policy=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_policy is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_policy = true\r\n}\r\n```"
              },
              "help": {
                "markdown": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_policy=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_policy is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_policy = true\r\n}\r\n```",
                "text": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_public_access_block` must also exist and have `block_public_policy=true`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"vulnerable_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  # block_public_policy is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket\" \"example_bucket\" {\r\n  bucket = \"mybucket\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"secure_example\" {\r\n  bucket = aws_s3_bucket.example_bucket.id\r\n  block_public_policy = true\r\n}\r\n```"
              },
              "id": "aws_s3_block_public_policy",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_s3_block_public_policy"
              }
            },
            {
              "fullDescription": {
                "markdown": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_server_side_encryption_configuration` must also exist with the key `apply_server_side_encryption_by_default`. Alternatively, the `aws_s3_bucket` resource should have the (deprecated) `server_side_encryption_configuration` key.\n\nVulnerable example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\n# resource \"aws_s3_bucket_server_side_encryption_configuration\" is not defined\n```\n\nSecure example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"secure_example_1\" {\n  bucket = aws_s3_bucket.mybucket.bucket\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.mykey.arn\n      sse_algorithm     = \"aws:kms\"\n    }\n  }\n}\n```\n\nVulnerable example #2 -\n```\nresource \"aws_s3_bucket\" \"vulnerable_example_2\" {\n  # server_side_encryption_configuration is not set\n}\n```\n\nSecure example #2 -\n```\nresource \"aws_s3_bucket\" \"secure_example_2\" {\n  bucket = \"mybucket\"\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        kms_master_key_id = aws_kms_key.mykey.arn\n        sse_algorithm     = \"aws:kms\"\n      }\n    }\n  }\n}\n```",
                "text": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_server_side_encryption_configuration` must also exist with the key `apply_server_side_encryption_by_default`. Alternatively, the `aws_s3_bucket` resource should have the (deprecated) `server_side_encryption_configuration` key.\n\nVulnerable example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\n# resource \"aws_s3_bucket_server_side_encryption_configuration\" is not defined\n```\n\nSecure example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"secure_example_1\" {\n  bucket = aws_s3_bucket.mybucket.bucket\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.mykey.arn\n      sse_algorithm     = \"aws:kms\"\n    }\n  }\n}\n```\n\nVulnerable example #2 -\n```\nresource \"aws_s3_bucket\" \"vulnerable_example_2\" {\n  # server_side_encryption_configuration is not set\n}\n```\n\nSecure example #2 -\n```\nresource \"aws_s3_bucket\" \"secure_example_2\" {\n  bucket = \"mybucket\"\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        kms_master_key_id = aws_kms_key.mykey.arn\n        sse_algorithm     = \"aws:kms\"\n      }\n    }\n  }\n}\n```"
              },
              "help": {
                "markdown": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_server_side_encryption_configuration` must also exist with the key `apply_server_side_encryption_by_default`. Alternatively, the `aws_s3_bucket` resource should have the (deprecated) `server_side_encryption_configuration` key.\n\nVulnerable example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\n# resource \"aws_s3_bucket_server_side_encryption_configuration\" is not defined\n```\n\nSecure example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"secure_example_1\" {\n  bucket = aws_s3_bucket.mybucket.bucket\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.mykey.arn\n      sse_algorithm     = \"aws:kms\"\n    }\n  }\n}\n```\n\nVulnerable example #2 -\n```\nresource \"aws_s3_bucket\" \"vulnerable_example_2\" {\n  # server_side_encryption_configuration is not set\n}\n```\n\nSecure example #2 -\n```\nresource \"aws_s3_bucket\" \"secure_example_2\" {\n  bucket = \"mybucket\"\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        kms_master_key_id = aws_kms_key.mykey.arn\n        sse_algorithm     = \"aws:kms\"\n      }\n    }\n  }\n}\n```",
                "text": "If resource `aws_s3_bucket` exists, then resource `aws_s3_bucket_server_side_encryption_configuration` must also exist with the key `apply_server_side_encryption_by_default`. Alternatively, the `aws_s3_bucket` resource should have the (deprecated) `server_side_encryption_configuration` key.\n\nVulnerable example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\n# resource \"aws_s3_bucket_server_side_encryption_configuration\" is not defined\n```\n\nSecure example #1 -\n```\nresource \"aws_s3_bucket\" \"mybucket\" {\n  bucket = \"mybucket\"\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"secure_example_1\" {\n  bucket = aws_s3_bucket.mybucket.bucket\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.mykey.arn\n      sse_algorithm     = \"aws:kms\"\n    }\n  }\n}\n```\n\nVulnerable example #2 -\n```\nresource \"aws_s3_bucket\" \"vulnerable_example_2\" {\n  # server_side_encryption_configuration is not set\n}\n```\n\nSecure example #2 -\n```\nresource \"aws_s3_bucket\" \"secure_example_2\" {\n  bucket = \"mybucket\"\n\n  server_side_encryption_configuration {\n    rule {\n      apply_server_side_encryption_by_default {\n        kms_master_key_id = aws_kms_key.mykey.arn\n        sse_algorithm     = \"aws:kms\"\n      }\n    }\n  }\n}\n```"
              },
              "id": "aws_s3_encrypt",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_s3_encrypt"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `aws_s3_bucket_object` should have key `server_side_encryption`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"vulnerable_example\" {\r\n  # server_side_encryption is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"secure_example\" {\r\n  server_side_encryption = \"AES256\"\r\n}\r\n```",
                "text": "Resource `aws_s3_bucket_object` should have key `server_side_encryption`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"vulnerable_example\" {\r\n  # server_side_encryption is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"secure_example\" {\r\n  server_side_encryption = \"AES256\"\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `aws_s3_bucket_object` should have key `server_side_encryption`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"vulnerable_example\" {\r\n  # server_side_encryption is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"secure_example\" {\r\n  server_side_encryption = \"AES256\"\r\n}\r\n```",
                "text": "Resource `aws_s3_bucket_object` should have key `server_side_encryption`\r\n\r\nVulnerable example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"vulnerable_example\" {\r\n  # server_side_encryption is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"aws_s3_bucket_object\" \"secure_example\" {\r\n  server_side_encryption = \"AES256\"\r\n}\r\n```"
              },
              "id": "aws_s3_encrypt_object",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for aws_s3_encrypt_object"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_managed_disk` should have `encryption_settings.enabled=true`\n\nVulnerable example -\n```\n resource \"azurerm_managed_disk\" \"vulnerable_example\" {\n    encryption_settings {\n        enabled = false\n    }\n }\n```\n\nSecure example -\n```\n resource \"azurerm_managed_disk\" \"secure_example\" {\n    encryption_settings {\n        enabled = true\n    }\n }\n```",
                "text": "Resource `azurerm_managed_disk` should have `encryption_settings.enabled=true`\n\nVulnerable example -\n```\n resource \"azurerm_managed_disk\" \"vulnerable_example\" {\n    encryption_settings {\n        enabled = false\n    }\n }\n```\n\nSecure example -\n```\n resource \"azurerm_managed_disk\" \"secure_example\" {\n    encryption_settings {\n        enabled = true\n    }\n }\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_managed_disk` should have `encryption_settings.enabled=true`\n\nVulnerable example -\n```\n resource \"azurerm_managed_disk\" \"vulnerable_example\" {\n    encryption_settings {\n        enabled = false\n    }\n }\n```\n\nSecure example -\n```\n resource \"azurerm_managed_disk\" \"secure_example\" {\n    encryption_settings {\n        enabled = true\n    }\n }\n```",
                "text": "Resource `azurerm_managed_disk` should have `encryption_settings.enabled=true`\n\nVulnerable example -\n```\n resource \"azurerm_managed_disk\" \"vulnerable_example\" {\n    encryption_settings {\n        enabled = false\n    }\n }\n```\n\nSecure example -\n```\n resource \"azurerm_managed_disk\" \"secure_example\" {\n    encryption_settings {\n        enabled = true\n    }\n }\n```"
              },
              "id": "azure_compute_encrypt",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_compute_encrypt"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_mysql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```",
                "text": "Resource `azurerm_mysql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_mysql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```",
                "text": "Resource `azurerm_mysql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```"
              },
              "id": "azure_mysql_no_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_mysql_no_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_mysql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_mysql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```",
                "text": "Resource `azurerm_mysql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_mysql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_mysql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_mysql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```",
                "text": "Resource `azurerm_mysql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_mysql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```"
              },
              "id": "azure_mysql_threat_detection",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_mysql_threat_detection"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_mysql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```",
                "text": "Resource `azurerm_mysql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_mysql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```",
                "text": "Resource `azurerm_mysql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_mysql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_mysql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```"
              },
              "id": "azure_mysql_tls",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_mysql_tls"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_postgresql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```",
                "text": "Resource `azurerm_postgresql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_postgresql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```",
                "text": "Resource `azurerm_postgresql_server` should have `public_network_access_enabled=false`\r\n\r\nVulnerable example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n    # public_network_access_enabled is not set\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"example\" {\r\n    public_network_access_enabled = false\r\n}\r\n```"
              },
              "id": "azure_postgresql_no_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_postgresql_no_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_postgresql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_postgresql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```",
                "text": "Resource `azurerm_postgresql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_postgresql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_postgresql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_postgresql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```",
                "text": "Resource `azurerm_postgresql_server` should have `threat_detection_policy.enabled=true`\n\nVulnerable example -\n```\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\n    # threat_detection_policy is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_postgresql_server\" \"secure_example\" {\n    threat_detection_policy {\n        enabled = true\n    }\n}\n```"
              },
              "id": "azure_postgresql_threat_detection",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_postgresql_threat_detection"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_postgresql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```",
                "text": "Resource `azurerm_postgresql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_postgresql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```",
                "text": "Resource `azurerm_postgresql_server` should have `ssl_enforcement_enabled=true`\r\n\r\nVulnerable example - \r\n```\r\nresource \"azurerm_postgresql_server\" \"vulnerable_example\" {\r\n   ssl_enforcement_enabled = false\r\n}\r\n```\r\n\r\nSecure example -\r\n```\r\nresource \"azurerm_postgresql_server\" \"secure_example\" {\r\n   ssl_enforcement_enabled = true\r\n}\r\n```"
              },
              "id": "azure_postgresql_tls",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_postgresql_tls"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_storage_account` should have `allow_nested_items_to_be_public=false` (default is `true`)\n\nVulnerable example - \n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # allow_nested_items_to_be_public is not set (or true)\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    allow_nested_items_to_be_public = false\n}\n```",
                "text": "Resource `azurerm_storage_account` should have `allow_nested_items_to_be_public=false` (default is `true`)\n\nVulnerable example - \n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # allow_nested_items_to_be_public is not set (or true)\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    allow_nested_items_to_be_public = false\n}\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_storage_account` should have `allow_nested_items_to_be_public=false` (default is `true`)\n\nVulnerable example - \n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # allow_nested_items_to_be_public is not set (or true)\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    allow_nested_items_to_be_public = false\n}\n```",
                "text": "Resource `azurerm_storage_account` should have `allow_nested_items_to_be_public=false` (default is `true`)\n\nVulnerable example - \n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # allow_nested_items_to_be_public is not set (or true)\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    allow_nested_items_to_be_public = false\n}\n```"
              },
              "id": "azure_storage_no_public_account",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_storage_no_public_account"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `azurerm_storage_account` should have `network_rules.bypass=AzureServices`\n\nVulnerable example -\n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # network_rules is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    network_rules {\n        default_action = \"Allow\"\n        bypass = [\"AzureServices\"]\n    }\n}\n```",
                "text": "Resource `azurerm_storage_account` should have `network_rules.bypass=AzureServices`\n\nVulnerable example -\n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # network_rules is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    network_rules {\n        default_action = \"Allow\"\n        bypass = [\"AzureServices\"]\n    }\n}\n```"
              },
              "help": {
                "markdown": "Resource `azurerm_storage_account` should have `network_rules.bypass=AzureServices`\n\nVulnerable example -\n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # network_rules is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    network_rules {\n        default_action = \"Allow\"\n        bypass = [\"AzureServices\"]\n    }\n}\n```",
                "text": "Resource `azurerm_storage_account` should have `network_rules.bypass=AzureServices`\n\nVulnerable example -\n```\nresource \"azurerm_storage_account\" \"vulnerable_example\" {\n    # network_rules is not set\n}\n```\n\nSecure example -\n```\nresource \"azurerm_storage_account\" \"secure_example\" {\n    network_rules {\n        default_action = \"Allow\"\n        bypass = [\"AzureServices\"]\n    }\n}\n```"
              },
              "id": "azure_trusted_bypass",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for azure_trusted_bypass"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_bigquery_dataset` should not have `access.special_group=allAuthenticatedUsers`\n\nVulnerable example -\n```\nresource \"google_bigquery_dataset\" \"vulnerable_example\" {\n  access {\n    role          = \"OWNER\"\n    special_group = \"allAuthenticatedUsers\"\n  }\n}\n```\n\nSecure example -\n```\nresource \"google_bigquery_dataset\" \"secure_example\" {\n  access {\n    role          = \"OWNER\"\n    user_by_email = google_service_account.bqowner.email\n  }\n}\n\nresource \"google_service_account\" \"bqowner\" {\n  account_id = \"bqowner\"\n  email = \"bqowner@gmail.com\"\n}\n```",
                "text": "Resource `google_bigquery_dataset` should not have `access.special_group=allAuthenticatedUsers`\n\nVulnerable example -\n```\nresource \"google_bigquery_dataset\" \"vulnerable_example\" {\n  access {\n    role          = \"OWNER\"\n    special_group = \"allAuthenticatedUsers\"\n  }\n}\n```\n\nSecure example -\n```\nresource \"google_bigquery_dataset\" \"secure_example\" {\n  access {\n    role          = \"OWNER\"\n    user_by_email = google_service_account.bqowner.email\n  }\n}\n\nresource \"google_service_account\" \"bqowner\" {\n  account_id = \"bqowner\"\n  email = \"bqowner@gmail.com\"\n}\n```"
              },
              "help": {
                "markdown": "Resource `google_bigquery_dataset` should not have `access.special_group=allAuthenticatedUsers`\n\nVulnerable example -\n```\nresource \"google_bigquery_dataset\" \"vulnerable_example\" {\n  access {\n    role          = \"OWNER\"\n    special_group = \"allAuthenticatedUsers\"\n  }\n}\n```\n\nSecure example -\n```\nresource \"google_bigquery_dataset\" \"secure_example\" {\n  access {\n    role          = \"OWNER\"\n    user_by_email = google_service_account.bqowner.email\n  }\n}\n\nresource \"google_service_account\" \"bqowner\" {\n  account_id = \"bqowner\"\n  email = \"bqowner@gmail.com\"\n}\n```",
                "text": "Resource `google_bigquery_dataset` should not have `access.special_group=allAuthenticatedUsers`\n\nVulnerable example -\n```\nresource \"google_bigquery_dataset\" \"vulnerable_example\" {\n  access {\n    role          = \"OWNER\"\n    special_group = \"allAuthenticatedUsers\"\n  }\n}\n```\n\nSecure example -\n```\nresource \"google_bigquery_dataset\" \"secure_example\" {\n  access {\n    role          = \"OWNER\"\n    user_by_email = google_service_account.bqowner.email\n  }\n}\n\nresource \"google_service_account\" \"bqowner\" {\n  account_id = \"bqowner\"\n  email = \"bqowner@gmail.com\"\n}\n```"
              },
              "id": "gcp_bigquery_no_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_bigquery_no_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_compute_instance` should not have `metadata.serial-port-enable=true`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n   metadata = {\n     serial-port-enable = true\n   }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_instance\" \"secure_example\" {\n   metadata = {\n     serial-port-enable = false # or unset\n   }\n}\n```",
                "text": "Resource `google_compute_instance` should not have `metadata.serial-port-enable=true`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n   metadata = {\n     serial-port-enable = true\n   }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_instance\" \"secure_example\" {\n   metadata = {\n     serial-port-enable = false # or unset\n   }\n}\n```"
              },
              "help": {
                "markdown": "Resource `google_compute_instance` should not have `metadata.serial-port-enable=true`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n   metadata = {\n     serial-port-enable = true\n   }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_instance\" \"secure_example\" {\n   metadata = {\n     serial-port-enable = false # or unset\n   }\n}\n```",
                "text": "Resource `google_compute_instance` should not have `metadata.serial-port-enable=true`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n   metadata = {\n     serial-port-enable = true\n   }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_instance\" \"secure_example\" {\n   metadata = {\n     serial-port-enable = false # or unset\n   }\n}\n```"
              },
              "id": "gcp_gce_disable_serial",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_gce_disable_serial"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_compute_instance` should not have key `network_interface.access_config`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n\tnetwork_interface {\n\t\tnetwork = \"default\"\n\t\taccess_config {\n\t\t\tpublic_ptr_domain_name = \"YOUR.DOMAIN.COM\"\n   \t\t }\n\t  }\n}\n```\n\nSecure example - \n```\nresource \"google_compute_instance\" \"secure_example\" {\n        network_interface {\n                # access_config is not set\n        }\n}\n```",
                "text": "Resource `google_compute_instance` should not have key `network_interface.access_config`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n\tnetwork_interface {\n\t\tnetwork = \"default\"\n\t\taccess_config {\n\t\t\tpublic_ptr_domain_name = \"YOUR.DOMAIN.COM\"\n   \t\t }\n\t  }\n}\n```\n\nSecure example - \n```\nresource \"google_compute_instance\" \"secure_example\" {\n        network_interface {\n                # access_config is not set\n        }\n}\n```"
              },
              "help": {
                "markdown": "Resource `google_compute_instance` should not have key `network_interface.access_config`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n\tnetwork_interface {\n\t\tnetwork = \"default\"\n\t\taccess_config {\n\t\t\tpublic_ptr_domain_name = \"YOUR.DOMAIN.COM\"\n   \t\t }\n\t  }\n}\n```\n\nSecure example - \n```\nresource \"google_compute_instance\" \"secure_example\" {\n        network_interface {\n                # access_config is not set\n        }\n}\n```",
                "text": "Resource `google_compute_instance` should not have key `network_interface.access_config`\n\nVulnerable example -\n```\nresource \"google_compute_instance\" \"vulnerable_example\" {\n\tnetwork_interface {\n\t\tnetwork = \"default\"\n\t\taccess_config {\n\t\t\tpublic_ptr_domain_name = \"YOUR.DOMAIN.COM\"\n   \t\t }\n\t  }\n}\n```\n\nSecure example - \n```\nresource \"google_compute_instance\" \"secure_example\" {\n        network_interface {\n                # access_config is not set\n        }\n}\n```"
              },
              "id": "gcp_gce_no_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_gce_no_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_container_node_pool` should have `management.auto_upgrade=true`\n\nVulnerable example - \n```\nresource \"google_container_node_pool\" \"vulnerable_example\" {\n    management {\n     auto_upgrade = false\n   }\n}\n```\n\nSecure example - \n```\nresource \"google_container_node_pool\" \"secure_example\" {\n    management {\n     auto_upgrade = true\n   }\n}\n```",
                "text": "Resource `google_container_node_pool` should have `management.auto_upgrade=true`\n\nVulnerable example - \n```\nresource \"google_container_node_pool\" \"vulnerable_example\" {\n    management {\n     auto_upgrade = false\n   }\n}\n```\n\nSecure example - \n```\nresource \"google_container_node_pool\" \"secure_example\" {\n    management {\n     auto_upgrade = true\n   }\n}\n```"
              },
              "help": {
                "markdown": "Resource `google_container_node_pool` should have `management.auto_upgrade=true`\n\nVulnerable example - \n```\nresource \"google_container_node_pool\" \"vulnerable_example\" {\n    management {\n     auto_upgrade = false\n   }\n}\n```\n\nSecure example - \n```\nresource \"google_container_node_pool\" \"secure_example\" {\n    management {\n     auto_upgrade = true\n   }\n}\n```",
                "text": "Resource `google_container_node_pool` should have `management.auto_upgrade=true`\n\nVulnerable example - \n```\nresource \"google_container_node_pool\" \"vulnerable_example\" {\n    management {\n     auto_upgrade = false\n   }\n}\n```\n\nSecure example - \n```\nresource \"google_container_node_pool\" \"secure_example\" {\n    management {\n     auto_upgrade = true\n   }\n}\n```"
              },
              "id": "gcp_gke_auto_upgrade",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_gke_auto_upgrade"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_container_cluster` should not have `enable_legacy_abac=true`\n\nVulnerable example -\n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n    enable_legacy_abac = true\n }\n```\n\nSecure example - \n```\nresource \"google_container_cluster\" \"secure_example\" {\n    # enable_legacy_abac is not set\n }\n```",
                "text": "Resource `google_container_cluster` should not have `enable_legacy_abac=true`\n\nVulnerable example -\n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n    enable_legacy_abac = true\n }\n```\n\nSecure example - \n```\nresource \"google_container_cluster\" \"secure_example\" {\n    # enable_legacy_abac is not set\n }\n```"
              },
              "help": {
                "markdown": "Resource `google_container_cluster` should not have `enable_legacy_abac=true`\n\nVulnerable example -\n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n    enable_legacy_abac = true\n }\n```\n\nSecure example - \n```\nresource \"google_container_cluster\" \"secure_example\" {\n    # enable_legacy_abac is not set\n }\n```",
                "text": "Resource `google_container_cluster` should not have `enable_legacy_abac=true`\n\nVulnerable example -\n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n    enable_legacy_abac = true\n }\n```\n\nSecure example - \n```\nresource \"google_container_cluster\" \"secure_example\" {\n    # enable_legacy_abac is not set\n }\n```"
              },
              "id": "gcp_gke_legacy_auth_abac",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_gke_legacy_auth_abac"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_container_cluster` should have key `master_authorized_networks_config.cidr_blocks`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n\tmaster_authorized_networks_config {\n\t\t# cidr_blocks is not set\n\t}\n}\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"192.168.0.0/16\"\n      display_name = \"internal\"\n    }\n  }\n}\n```",
                "text": "Resource `google_container_cluster` should have key `master_authorized_networks_config.cidr_blocks`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n\tmaster_authorized_networks_config {\n\t\t# cidr_blocks is not set\n\t}\n}\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"192.168.0.0/16\"\n      display_name = \"internal\"\n    }\n  }\n}\n```"
              },
              "help": {
                "markdown": "Resource `google_container_cluster` should have key `master_authorized_networks_config.cidr_blocks`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n\tmaster_authorized_networks_config {\n\t\t# cidr_blocks is not set\n\t}\n}\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"192.168.0.0/16\"\n      display_name = \"internal\"\n    }\n  }\n}\n```",
                "text": "Resource `google_container_cluster` should have key `master_authorized_networks_config.cidr_blocks`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n\tmaster_authorized_networks_config {\n\t\t# cidr_blocks is not set\n\t}\n}\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block = \"192.168.0.0/16\"\n      display_name = \"internal\"\n    }\n  }\n}\n```"
              },
              "id": "gcp_gke_no_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_gke_no_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_container_cluster` should have key `private_cluster_config` and subkeys `enable_private_nodes=true` & `enable_private_endpoint=true`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n   # private_cluster_config is not set\n }\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   private_cluster_config {\n     enable_private_nodes = true\n     enable_private_endpoint = true\n   }\n }\n```",
                "text": "Resource `google_container_cluster` should have key `private_cluster_config` and subkeys `enable_private_nodes=true` & `enable_private_endpoint=true`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n   # private_cluster_config is not set\n }\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   private_cluster_config {\n     enable_private_nodes = true\n     enable_private_endpoint = true\n   }\n }\n```"
              },
              "help": {
                "markdown": "Resource `google_container_cluster` should have key `private_cluster_config` and subkeys `enable_private_nodes=true` & `enable_private_endpoint=true`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n   # private_cluster_config is not set\n }\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   private_cluster_config {\n     enable_private_nodes = true\n     enable_private_endpoint = true\n   }\n }\n```",
                "text": "Resource `google_container_cluster` should have key `private_cluster_config` and subkeys `enable_private_nodes=true` & `enable_private_endpoint=true`\n\nVulnerable example - \n```\nresource \"google_container_cluster\" \"vulnerable_example\" {\n   # private_cluster_config is not set\n }\n```\n\nSecure example -\n```\nresource \"google_container_cluster\" \"secure_example\" {\n   private_cluster_config {\n     enable_private_nodes = true\n     enable_private_endpoint = true\n   }\n }\n```"
              },
              "id": "gcp_gke_private_cluster",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_gke_private_cluster"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_storage_bucket_iam_member` should not contain `member=allUsers` or `member=allAuthenticatedUsers`. Resource `google_storage_bucket_iam_binding` should not contain the following `members` - `AllUsers`, `allAuthenticatedUsers`.\n\nVulnerable example -\n```\nresource \"google_storage_bucket_iam_binding\" \"vulnerable_example\" {\n    members = [\n        \"allUsers\",\n    ]\n }\n```\n\nSecure example -\n```\nresource \"google_storage_bucket_iam_binding\" \"secure_example\" {\n    members = [\n        \"user:bucketowner@mycompany.com\",\n    ]\n }\n```",
                "text": "Resource `google_storage_bucket_iam_member` should not contain `member=allUsers` or `member=allAuthenticatedUsers`. Resource `google_storage_bucket_iam_binding` should not contain the following `members` - `AllUsers`, `allAuthenticatedUsers`.\n\nVulnerable example -\n```\nresource \"google_storage_bucket_iam_binding\" \"vulnerable_example\" {\n    members = [\n        \"allUsers\",\n    ]\n }\n```\n\nSecure example -\n```\nresource \"google_storage_bucket_iam_binding\" \"secure_example\" {\n    members = [\n        \"user:bucketowner@mycompany.com\",\n    ]\n }\n```"
              },
              "help": {
                "markdown": "Resource `google_storage_bucket_iam_member` should not contain `member=allUsers` or `member=allAuthenticatedUsers`. Resource `google_storage_bucket_iam_binding` should not contain the following `members` - `AllUsers`, `allAuthenticatedUsers`.\n\nVulnerable example -\n```\nresource \"google_storage_bucket_iam_binding\" \"vulnerable_example\" {\n    members = [\n        \"allUsers\",\n    ]\n }\n```\n\nSecure example -\n```\nresource \"google_storage_bucket_iam_binding\" \"secure_example\" {\n    members = [\n        \"user:bucketowner@mycompany.com\",\n    ]\n }\n```",
                "text": "Resource `google_storage_bucket_iam_member` should not contain `member=allUsers` or `member=allAuthenticatedUsers`. Resource `google_storage_bucket_iam_binding` should not contain the following `members` - `AllUsers`, `allAuthenticatedUsers`.\n\nVulnerable example -\n```\nresource \"google_storage_bucket_iam_binding\" \"vulnerable_example\" {\n    members = [\n        \"allUsers\",\n    ]\n }\n```\n\nSecure example -\n```\nresource \"google_storage_bucket_iam_binding\" \"secure_example\" {\n    members = [\n        \"user:bucketowner@mycompany.com\",\n    ]\n }\n```"
              },
              "id": "gcp_gsb_no_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_gsb_no_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_sql_database_instance` should have `settings.backup_configuration.enabled=true`\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        backup_configuration {\n            enabled = false\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        backup_configuration {\n            enabled = true        \n       }\n    }\n }\n```",
                "text": "Resource `google_sql_database_instance` should have `settings.backup_configuration.enabled=true`\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        backup_configuration {\n            enabled = false\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        backup_configuration {\n            enabled = true        \n       }\n    }\n }\n```"
              },
              "help": {
                "markdown": "Resource `google_sql_database_instance` should have `settings.backup_configuration.enabled=true`\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        backup_configuration {\n            enabled = false\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        backup_configuration {\n            enabled = true        \n       }\n    }\n }\n```",
                "text": "Resource `google_sql_database_instance` should have `settings.backup_configuration.enabled=true`\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        backup_configuration {\n            enabled = false\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        backup_configuration {\n            enabled = true        \n       }\n    }\n }\n```"
              },
              "id": "gcp_sql_backup",
              "properties": {
                "security-severity": "6.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_sql_backup"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_sql_database_instance` should have `settings.ip_configuration.ipv4_enabled=false` (or undefined) and `settings.ip_configuration.private_network` defined OR `settings.ip_configuration.authorized_networks` != `0.0.0.0/0` (default value is `0.0.0.0/0`)\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        authorized_networks {\n            value           = \"0.0.0.0/0\"\n            name            = \"internet\"\n        }\n    }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_network\" \"private_network\" {\n  name = \"private-network\"\n}\n\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            ipv4_enabled    = false\n            private_network = google_compute_network.private_network.id\n        }\n    }\n}\n```",
                "text": "Resource `google_sql_database_instance` should have `settings.ip_configuration.ipv4_enabled=false` (or undefined) and `settings.ip_configuration.private_network` defined OR `settings.ip_configuration.authorized_networks` != `0.0.0.0/0` (default value is `0.0.0.0/0`)\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        authorized_networks {\n            value           = \"0.0.0.0/0\"\n            name            = \"internet\"\n        }\n    }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_network\" \"private_network\" {\n  name = \"private-network\"\n}\n\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            ipv4_enabled    = false\n            private_network = google_compute_network.private_network.id\n        }\n    }\n}\n```"
              },
              "help": {
                "markdown": "Resource `google_sql_database_instance` should have `settings.ip_configuration.ipv4_enabled=false` (or undefined) and `settings.ip_configuration.private_network` defined OR `settings.ip_configuration.authorized_networks` != `0.0.0.0/0` (default value is `0.0.0.0/0`)\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        authorized_networks {\n            value           = \"0.0.0.0/0\"\n            name            = \"internet\"\n        }\n    }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_network\" \"private_network\" {\n  name = \"private-network\"\n}\n\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            ipv4_enabled    = false\n            private_network = google_compute_network.private_network.id\n        }\n    }\n}\n```",
                "text": "Resource `google_sql_database_instance` should have `settings.ip_configuration.ipv4_enabled=false` (or undefined) and `settings.ip_configuration.private_network` defined OR `settings.ip_configuration.authorized_networks` != `0.0.0.0/0` (default value is `0.0.0.0/0`)\n\nVulnerable example -\n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        authorized_networks {\n            value           = \"0.0.0.0/0\"\n            name            = \"internet\"\n        }\n    }\n}\n```\n\nSecure example -\n```\nresource \"google_compute_network\" \"private_network\" {\n  name = \"private-network\"\n}\n\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            ipv4_enabled    = false\n            private_network = google_compute_network.private_network.id\n        }\n    }\n}\n```"
              },
              "id": "gcp_sql_no_public",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_sql_no_public"
              }
            },
            {
              "fullDescription": {
                "markdown": "Resource `google_sql_database_instance` should have `settings.ip_configuration.require_ssl=true`\n\nVulnerable example - \n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = false  # or unset\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = true\n        }\n    }\n }\n```",
                "text": "Resource `google_sql_database_instance` should have `settings.ip_configuration.require_ssl=true`\n\nVulnerable example - \n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = false  # or unset\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = true\n        }\n    }\n }\n```"
              },
              "help": {
                "markdown": "Resource `google_sql_database_instance` should have `settings.ip_configuration.require_ssl=true`\n\nVulnerable example - \n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = false  # or unset\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = true\n        }\n    }\n }\n```",
                "text": "Resource `google_sql_database_instance` should have `settings.ip_configuration.require_ssl=true`\n\nVulnerable example - \n```\nresource \"google_sql_database_instance\" \"vulnerable_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = false  # or unset\n        }\n    }\n }\n```\n\nSecure example -\n```\nresource \"google_sql_database_instance\" \"secure_example\" {\n    settings {\n        ip_configuration {\n            require_ssl = true\n        }\n    }\n }\n```"
              },
              "id": "gcp_sql_tls",
              "properties": {
                "security-severity": "8.9"
              },
              "relationships": [],
              "shortDescription": {
                "text": "Scanner for gcp_sql_tls"
              }
            }
          ],
          "supportedTaxonomies": [],
          "taxa": [],
          "version": "1.23.3"
        },
        "extensions": []
      },
      "translations": [],
      "versionControlProvenance": [],
      "webRequests": [],
      "webResponses": []
    },
    {
      "addresses": [],
      "graphs": [],
      "invocations": [
        {
          "arguments": [
            "/Users/assafa/.jfrog/dependencies/analyzerManager/zd_scanner/scanner",
            "scan",
            "/var/folders/xv/th4cksxn7jv9wjrdnn1h4tj00000gq/T/jfrog.cli.temp.-1756385370-1617329596/Sast_1756385399_3/results.sarif",
            "/var/folders/xv/th4cksxn7jv9wjrdnn1h4tj00000gq/T/jfrog.cli.temp.-1756385370-1617329596/Sast_1756385399_3/config.yaml"
          ],
          "executionSuccessful": true,
          "notificationConfigurationOverrides": [],
          "ruleConfigurationOverrides": [],
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [],
          "workingDirectory": {
            "index": 0,
            "uri": "file:///Users/assafa/Documents/code/other-projects/terragoat"
          }
        }
      ],
      "language": "en-US",
      "logicalLocations": [],
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "policies": [],
      "redactionTokens": [],
      "results": [],
      "runAggregates": [],
      "taxonomies": [],
      "threadFlowLocations": [],
      "tool": {
        "driver": {
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sast",
          "isComprehensive": false,
          "language": "en-US",
          "locations": [],
          "name": "🐸 JFrog SAST",
          "notifications": [],
          "rules": [],
          "supportedTaxonomies": [],
          "taxa": [],
          "version": "1.23.3"
        },
        "extensions": []
      },
      "translations": [],
      "versionControlProvenance": [],
      "webRequests": [],
      "webResponses": []
    }
  ],
  "properties": {}
}
